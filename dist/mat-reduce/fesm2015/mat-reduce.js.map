{"version":3,"file":"mat-reduce.js","sources":["ng://mat-reduce/lib/dialogs/app-confirmation.component.ts","ng://mat-reduce/lib/services/form-builder-typed.service.ts","ng://mat-reduce/lib/utils/case-helper.ts","ng://mat-reduce/lib/controls/form-base-class.ts","ng://mat-reduce/lib/controls/using-3rd-party/form-color.component.ts","ng://mat-reduce/lib/utils/logger.ts","ng://mat-reduce/lib/controls/using-3rd-party/form-date.component.ts","ng://mat-reduce/lib/controls/using-3rd-party/form-time.component.ts","ng://mat-reduce/lib/controls/using-3rd-party/form-signature.component.ts","ng://mat-reduce/lib/controls/using-3rd-party/editor-modules/counter.ts","ng://mat-reduce/lib/controls/using-3rd-party/editor-modules/add-quill-inline-styles.ts","ng://mat-reduce/lib/controls/using-3rd-party/form-quill-editor.component.ts","ng://mat-reduce/lib/controls/using-3rd-party/forms-3rd-party.module.ts","ng://mat-reduce/lib/controls/material/form-select-object-multiple.component.ts","ng://mat-reduce/lib/controls/material/form-toggle.component.ts","ng://mat-reduce/lib/controls/material/form-text-clearable.component.ts","ng://mat-reduce/lib/controls/material/form-text-disabled.component.ts","ng://mat-reduce/lib/controls/material/form-text-icons.component.ts","ng://mat-reduce/lib/controls/material/form-text-password.component.ts","ng://mat-reduce/lib/controls/material/form-text.component.ts","ng://mat-reduce/lib/controls/material/form-textarea-disabled.component.ts","ng://mat-reduce/lib/controls/material/form-textarea.component.ts","ng://mat-reduce/lib/controls/material/form-toggle-reversed.component.ts","ng://mat-reduce/lib/controls/material/form-select-object.component.ts","ng://mat-reduce/lib/controls/material/form-select-string.component.ts","ng://mat-reduce/lib/controls/material/form-tag-multiple.component.ts","ng://mat-reduce/lib/controls/material/form-tag-single.component.ts","ng://mat-reduce/lib/controls/material/form-number.component.ts","ng://mat-reduce/lib/controls/material/form-select-string-multiple.component.ts","ng://mat-reduce/lib/controls/material/forms-material.module.ts","ng://mat-reduce/lib/controls/composed/form-assignee.models.ts","ng://mat-reduce/lib/controls/composed/contact-helper.ts","ng://mat-reduce/lib/controls/composed/form-assignee-selector.component.ts","ng://mat-reduce/lib/controls/composed/forms-composed.module.ts","ng://mat-reduce/lib/mat-reduce.module.ts","ng://mat-reduce/lib/controls/material/Tag.ts","ng://mat-reduce/lib/controls/material/TagObject.ts"],"sourcesContent":["import {\r\n  Component,\r\n  Inject,\r\n  Injectable,\r\n  OnInit,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport {\r\n  MAT_DIALOG_DATA,\r\n  MatButton,\r\n  MatDialog,\r\n  MatDialogRef\r\n} from '@angular/material';\r\nimport { take } from 'rxjs/operators';\r\n\r\ninterface ConfirmationDialogData {\r\n  message: string;\r\n  okIcon?: string;\r\n  okLabel?: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-confirmation-dialog',\r\n  template: `\r\n    <p class=\"title is-centered\">Confirm</p>\r\n    <p class=\"subtitle is-centered\">{{ message }}</p>\r\n    <form (submit)=\"onSubmitOk()\" class=\"buttons\">\r\n      <button #okButton mat-raised-button color=\"primary\" type=\"submit\">\r\n        <mat-icon>{{ okIcon }}</mat-icon>\r\n        <span>{{ okLabel }}</span>\r\n      </button>\r\n      <button mat-raised-button color=\"white\" (click)=\"onClickCancel($event)\">\r\n        <mat-icon>cancel</mat-icon>\r\n        <span>Cancel</span>\r\n      </button>\r\n    </form>\r\n  `,\r\n  styles: [\r\n    `\r\n      .title {\r\n        font-size: 1.8em;\r\n        margin: 0px;\r\n      }\r\n      .subtitle {\r\n        color: grey;\r\n        margin: 0px;\r\n        font-size: 1.4em;\r\n      }\r\n      .buttons {\r\n        display: flex;\r\n        justify-content: center;\r\n        margin-top: 10px;\r\n      }\r\n      button {\r\n        margin-left: 10px;\r\n        margin-right: 10px;\r\n      }\r\n    `\r\n  ]\r\n})\r\nexport class AppConfirmationDialogComponent implements OnInit {\r\n  @ViewChild('okButton', {} as any) okButton: MatButton;\r\n\r\n  message: string;\r\n  okIcon: string;\r\n  okLabel: string;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AppConfirmationDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: ConfirmationDialogData\r\n  ) {\r\n    this.message = data.message;\r\n    this.okIcon = data.okIcon ? data.okIcon : 'done';\r\n    this.okLabel = data.okLabel ? data.okLabel : 'Ok';\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.okButton && this.okButton.focus) {\r\n      this.okButton.focus();\r\n    }\r\n  }\r\n\r\n  onClickCancel(e): void {\r\n    e.preventDefault();\r\n    this.dialogRef.close(false);\r\n  }\r\n\r\n  onSubmitOk(): void {\r\n    this.dialogRef.close(true);\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class ConfirmationService {\r\n  constructor(private dialog: MatDialog) {}\r\n\r\n  async AskConfirm(\r\n    confirmationMessage: string,\r\n    okLabel?: string,\r\n    okIcon?: string\r\n  ): Promise<boolean> {\r\n    const data = {\r\n      message: confirmationMessage,\r\n      okIcon: okIcon,\r\n      okLabel: okLabel\r\n    } as ConfirmationDialogData;\r\n    const dialogRef = this.dialog.open(AppConfirmationDialogComponent, {\r\n      width: '300px',\r\n      hasBackdrop: true,\r\n      disableClose: false,\r\n      data: data\r\n    });\r\n\r\n    const result: boolean = await dialogRef\r\n      .afterClosed()\r\n      .pipe(take(1))\r\n      .toPromise();\r\n    console.log(`Confirmation-Service: AskConfirm=${!!result}`);\r\n    return result;\r\n  }\r\n}\r\n","import {\r\n  AbstractControl,\r\n  FormArray,\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  ValidatorFn,\r\n  AbstractControlOptions,\r\n  AsyncValidatorFn\r\n} from '@angular/forms';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport class FormControlWithLabel extends FormControl {\r\n  constructor(value: any, validators: any, public label: string) {\r\n    super(value, validators);\r\n  }\r\n}\r\n\r\nexport class FormArrayWithLabel extends FormArray {\r\n  constructor(value: any, validators: any, public label: string) {\r\n    super(value, validators);\r\n  }\r\n}\r\n\r\nexport type FormGroupControlsOf<T> = {\r\n  [P in keyof T]: FormControl | FormGroup | FormArray | FormControlWithLabel\r\n};\r\n\r\nexport abstract class FormGroupTypeSafe<T> extends FormGroup {\r\n  // give the value a custom type s\r\n  value: T;\r\n  label: string;\r\n  setValue(newValue: T) {\r\n    super.setValue(newValue);\r\n  }\r\n\r\n  // create helper methods to achieve this syntax eg: this.form.getSafe(x => x.heroName).patchValue('Himan')\r\n  public abstract getSafe(\r\n    propertyFunction: (typeVal: T) => any\r\n  ): AbstractControl;\r\n  public abstract setControlSafe(\r\n    propertyFunction: (typeVal: T) => any,\r\n    control: AbstractControl\r\n  ): void;\r\n  // If you need more function implement declare them here but implement them on FormBuilderTypedService.group instantiation.\r\n}\r\n\r\nexport abstract class FormArrayTypeSafe<T> extends FormArray {\r\n  value: T[];\r\n  at(index: number): FormControlTypeSafe<T> | FormGroupTypeSafe<T> {\r\n    return super.at(index) as any;\r\n  }\r\n}\r\n\r\nexport abstract class FormControlTypeSafe<T> extends FormControl {\r\n  value: T;\r\n  valueChanges: Observable<T>;\r\n  setValue(newValue: T) {\r\n    super.setValue(newValue);\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class FormBuilderTypedService extends FormBuilder {\r\n  control<T>(\r\n    formState?: any,\r\n    validatorOrOpts?:\r\n      | ValidatorFn\r\n      | ValidatorFn[]\r\n      | AbstractControlOptions\r\n      | null,\r\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null\r\n  ): FormControlTypeSafe<T> {\r\n    const control = super.control(\r\n      formState,\r\n      validatorOrOpts,\r\n      asyncValidator\r\n    ) as FormControlTypeSafe<T>;\r\n    return control;\r\n  }\r\n  array<T>(\r\n    controlsConfig:\r\n      | FormGroupControlsOf<T>[]\r\n      | FormGroupTypeSafe<T>[]\r\n      | FormControlTypeSafe<T>[],\r\n    extra?: {\r\n      [key: string]: any;\r\n    } | null\r\n  ): FormArrayTypeSafe<T> {\r\n    const arr = super.array(controlsConfig, extra) as FormArrayTypeSafe<T>;\r\n\r\n    return arr;\r\n  }\r\n  // override group to be type safe\r\n  group<T>(\r\n    controlsConfig: FormGroupControlsOf<T>,\r\n    extra?: {\r\n      [key: string]: any;\r\n    } | null\r\n  ): FormGroupTypeSafe<T> {\r\n    /*NOTE the return FormGroupTypeSafe<T> */\r\n\r\n    // instantiate group from angular type\r\n    const gr = super.group(controlsConfig, extra) as FormGroupTypeSafe<T>;\r\n    if (extra) {\r\n      gr.label = extra['label'];\r\n    }\r\n\r\n    const getPropertyName = (propertyFunction: Function): string => {\r\n      //  https://github.com/dsherret/ts-nameof - helped me with the code below, THANX!!!!\r\n      // propertyFunction.toString() sample value:\r\n      //   function(x) { return x.hero.address.postcode;}\r\n      // we need the 'hero.address.postcode'\r\n      // for gr.get('hero.address.postcode') function\r\n      const properties = propertyFunction\r\n        .toString()\r\n        .split('.')\r\n        .splice(1);\r\n\r\n      const r = properties.join('.');\r\n      return r;\r\n    };\r\n\r\n    if (gr) {\r\n      // implement getSafe method\r\n      gr.getSafe = (propertyFunction: (typeVal: T) => any): AbstractControl => {\r\n        const getStr = getPropertyName(propertyFunction);\r\n        // console.log(getStr);\r\n        const p = gr.get(getStr) as FormGroupTypeSafe<T>;\r\n        return p;\r\n      };\r\n\r\n      // implement setControlSafe\r\n      gr.setControlSafe = (\r\n        propertyFunction: (typeVal: T) => any,\r\n        control: AbstractControl\r\n      ): void => {\r\n        const getStr = getPropertyName(propertyFunction);\r\n        // console.log(getStr);\r\n        gr.setControl(getStr, control);\r\n      };\r\n    }\r\n\r\n    return gr;\r\n  }\r\n}\r\n","export function ConvertToTitleCase(input: string): string {\r\n  const capitalsWithSpaces = input.replace(/([A-Z])/g, ' $1').trim();\r\n  const underscoresToSpaces = capitalsWithSpaces.replace(/_/g, ' ');\r\n  return underscoresToSpaces\r\n    .split(' ')\r\n    .map(p => p.charAt(0).toUpperCase() + p.substr(1).toLowerCase())\r\n    .join(' ');\r\n}\r\n","import { ControlValueAccessor, FormControl, Validator, ValidatorFn, Validators } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { OnDestroy, OnInit, Input } from '@angular/core';\r\nimport { takeUntil, auditTime } from 'rxjs/operators';\r\nimport { ConvertToTitleCase } from '../utils/case-helper';\r\nimport {v4 as uuidv4 } from 'uuid';\r\n\r\nexport class FormBase<T>\r\n  implements OnInit, OnDestroy, ControlValueAccessor, Validator {\r\n  internalControl: FormControl = new FormControl();\r\n  autoCompleteObscureName: string;\r\n  _destroyed = new Subject();\r\n\r\n  disabled = false;\r\n  validationError: string;\r\n  _validators: ValidatorFn;\r\n\r\n  _value: T;\r\n\r\n  @Input()\r\n  appearance: 'outline' | 'fill' | 'standard';\r\n  @Input()\r\n  allowAutoComplete: boolean;\r\n  @Input()\r\n  formControlName: string;\r\n  @Input()\r\n  placeholder: string;\r\n  @Input()\r\n  debug = false;\r\n\r\n  constructor() {\r\n    // Garrentee that init and destroy are called\r\n    // even if ngOnInit() or ngOnDestroy() are overriden\r\n    const originalOnDestroy = this.ngOnDestroy;\r\n    this.ngOnDestroy = () => {\r\n      this.destroy();\r\n      originalOnDestroy.apply(this);\r\n    };\r\n    const originalOnInit = this.ngOnInit;\r\n    this.ngOnInit = () => {\r\n      this.init();\r\n      originalOnInit.apply(this);\r\n    };\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnDestroy() {}\r\n\r\n  init() {\r\n    this._destroyed.next();\r\n    if (!this.allowAutoComplete) {\r\n      this.autoCompleteObscureName = uuidv4();\r\n    }\r\n    this.internalControl.valueChanges\r\n      .pipe(takeUntil(this._destroyed))\r\n      .pipe(auditTime(100))\r\n      .subscribe(() => {\r\n        this._value = this.internalControl.value;\r\n        this.onChange(this._value);\r\n        this.onTouched();\r\n        // console.log('form-base-class: valueChanges', {val: this._value});\r\n      });\r\n\r\n    if (!this.placeholder) {\r\n      const nameParsed = ConvertToTitleCase(this.formControlName + '');\r\n      this.placeholder = nameParsed;\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this._destroyed.next();\r\n  }\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  set value(val) {\r\n    this._value = val;\r\n    this.internalControl.setValue(val);\r\n  }\r\n\r\n  writeValue(value: any): void {\r\n    this.value = value;\r\n  }\r\n\r\n  propagateOnChange: any = () => {};\r\n  registerOnChange(fn: any): void {\r\n    this.propagateOnChange = fn;\r\n  }\r\n\r\n  onTouched: any = () => {};\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    setTimeout(() => {\r\n      if (isDisabled) {\r\n        this.internalControl.disable();\r\n      } else {\r\n        this.internalControl.enable();\r\n      }\r\n    });\r\n  }\r\n\r\n  public validate(c: FormControl) {\r\n    const errors = c.errors;\r\n    const value = c.value;\r\n    // console.log('form-base-class: validate()', { errors, value });\r\n    this.internalControl.setValidators(c.validator);\r\n    return !this.validationError\r\n      ? null\r\n      : {\r\n          validationError: {\r\n            valid: false\r\n          }\r\n        };\r\n  }\r\n\r\n  private onChange(inputValue) {\r\n    this.validationError = this.CheckValueIsValid();\r\n    if (this.validationError) {\r\n      this.propagateOnChange(this.value);\r\n    } else {\r\n      this.propagateOnChange(inputValue);\r\n    }\r\n  }\r\n\r\n  CheckValueIsValid(): string {\r\n    return null;\r\n  }\r\n}\r\n","import { Component, forwardRef, Input, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-color',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width m-top\">\r\n      <span [class.txt-grey]=\"disabled\">\r\n        {{ placeholder }}\r\n      </span>\r\n      <input\r\n        matInput\r\n        [hidden]=\"true\"\r\n        [formControl]=\"internalControl\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      />\r\n      <mat-card\r\n        *ngIf=\"!disabled\"\r\n        [cpOutputFormat]=\"'hex'\"\r\n        class=\"box has-pointer\"\r\n        [style.background]=\"value\"\r\n        [(colorPicker)]=\"value\"\r\n        [cpPosition]=\"'top'\"\r\n      >\r\n        <div class=\"flex-space-between\">\r\n          <span>\r\n            {{ value ? value : 'click to pick color' }}\r\n          </span>\r\n          <button\r\n            mat-mini-fab\r\n            (click)=\"onClickClear($event)\"\r\n            [disabled]=\"disabled\"\r\n            matTooltip=\"Clear current color\"\r\n            class=\"bg-white close-btn\"\r\n          >\r\n            <mat-icon class=\"txt-black\">\r\n              clear\r\n            </mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-card>\r\n      <mat-card\r\n        *ngIf=\"disabled\"\r\n        class=\"box\"\r\n        [style.background]=\"value\"\r\n      >\r\n        <div class=\"flex-space-between\">\r\n          <span>\r\n            {{ value ? value : 'click to pick color' }}\r\n          </span>\r\n          <span>\r\n          </span>\r\n        </div>\r\n      </mat-card>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .close-btn {\r\n        position: absolute;\r\n        right: -4px;\r\n        top: -4px;\r\n        transform: scale(0.6);\r\n      }\r\n      .m-top {\r\n        margin-top: -20px;\r\n      }\r\n      .bg-white {\r\n        background-color: white !important;\r\n      }\r\n      .txt-black {\r\n        color: black;\r\n      }\r\n      .txt-grey {\r\n        color: grey;\r\n      }\r\n      .full-width {\r\n        width: 100%;\r\n      }\r\n      .box {\r\n        max-width: 200px;\r\n      }\r\n      .has-pointer {\r\n        cursor: pointer;\r\n      }\r\n      .flex-space-between {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormColorComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormColorComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormColorComponent extends FormBase<string> implements OnInit {\r\n  @Input()\r\n  defaultColor = '#42d742';\r\n\r\n  ngOnInit() {\r\n    if (!this.value) {\r\n      setTimeout(() => {\r\n        this.value = this.defaultColor;\r\n      });\r\n    }\r\n  }\r\n\r\n  onClickClear(e: Event) {\r\n    e.stopPropagation();\r\n    this.value = '';\r\n  }\r\n}\r\n","export class SimpleLog {\n  constructor(private debug: boolean) {}\n\n  public get log() {\n    if (!this.debug) {\n      return (...any) => {};\n    }\n    const boundLogFn: (...any) => void = console.log.bind(\n      console,\n      'mat-reduce:: '\n    );\n    return boundLogFn;\n  }\n\n  public get warn() {\n    if (!this.debug) {\n      return (...any) => {};\n    }\n    const boundLogFn: (...any) => void = console.warn.bind(\n      console,\n      'mat-reduce:: '\n    );\n    return boundLogFn;\n  }\n}\n","import { Component, forwardRef, Input, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\nimport { SimpleLog } from '../../utils/logger';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-date',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <input\r\n        matInput\r\n        (focus)=\"picker.open()\"\r\n        [min]=\"minDate\"\r\n        [matDatepicker]=\"picker\"\r\n        [disabled]=\"disabled\"\r\n        [placeholder]=\"placeholder\"\r\n        [(ngModel)]=\"value\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      />\r\n      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n      <mat-datepicker #picker></mat-datepicker>\r\n    </mat-form-field>\r\n  `,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormDateComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormDateComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormDateComponent extends FormBase<Date> implements OnInit {\r\n  @Input()\r\n  placeholder = '';\r\n  @Input()\r\n  isAfterToday: boolean;\r\n  @Input()\r\n  AfterDate: Date;\r\n\r\n  logger: SimpleLog;\r\n\r\n  ngOnInit() {\r\n    this.logger = new SimpleLog(this.debug);\r\n  }\r\n\r\n  get minDate() {\r\n    if (this.AfterDate) {\r\n      return this.AfterDate;\r\n    }\r\n    if (this.isAfterToday) {\r\n      return new Date();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  CheckValueIsValid(): string {\r\n    const formValue = this.value;\r\n    let formDate = formValue;\r\n    if (typeof formValue === 'string' || !formValue) {\r\n      formDate = new Date(formValue);\r\n    }\r\n    this.logger.log('form-date: CheckValueIsValid()', {\r\n      formValue,\r\n      formDate,\r\n      isAfterToday: this.isAfterToday,\r\n      isAfterDate: this.AfterDate\r\n    });\r\n    if (this.isAfterToday) {\r\n      const todaysDate = new Date();\r\n      const isAfterToday = this.isNewDateAfterThis(formDate, todaysDate);\r\n      if (!isAfterToday) {\r\n        return 'Date must be after today\\'s date';\r\n      }\r\n    }\r\n    if (this.AfterDate) {\r\n      const isAfterDate = this.isNewDateAfterThis(formDate, this.AfterDate);\r\n      if (!isAfterDate) {\r\n        return 'Date must be after date: ' + this.AfterDate.toDateString();\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private isNewDateAfterThis(formDate: Date, afterDate: Date) {\r\n    this.logger.log('form-date: isNewDateAfterThis()', {\r\n      formDate,\r\n      afterDate\r\n    });\r\n    if (!formDate || typeof formDate.getTime !== 'function') {\r\n      console.error('the form control value is not a valid Date', { formDate });\r\n      throw new Error();\r\n    }\r\n    if (!afterDate || typeof afterDate.getTime !== 'function') {\r\n      console.error('AfterDate is not a valid Date', { afterDate });\r\n      throw new Error();\r\n    }\r\n    const afterSeconds = afterDate.getTime();\r\n    const formSeconds = formDate.getTime();\r\n    const isAfter = afterSeconds < formSeconds;\r\n    this.logger.log('form-date: isNewDateAfterThis()', {\r\n      afterSeconds,\r\n      formSeconds,\r\n      isAfter\r\n    });\r\n    return isAfter;\r\n  }\r\n}\r\n","import { Component, forwardRef, Input, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-time',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <input\r\n        matInput\r\n        [formControl]=\"internalControl\"\r\n        [ngxTimepicker]=\"picker\"\r\n        [placeholder]=\"placeholder\"\r\n        [format]=\"format\"\r\n        [min]=\"min\"\r\n        [max]=\"max\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"false\"\r\n      />\r\n      <mat-icon\r\n        matSuffix\r\n        class=\"has-pointer\"\r\n        [class.is-grey]=\"disabled\"\r\n        (click)=\"picker.open()\"\r\n      >\r\n        access_time\r\n      </mat-icon>\r\n      <ngx-material-timepicker\r\n        #picker\r\n        [defaultTime]=\"defaultTime\"\r\n        [minutesGap]=\"minutesGap\"\r\n        ESC=\"true\"\r\n      ></ngx-material-timepicker>\r\n    </mat-form-field>\r\n  `,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormTimeComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormTimeComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  styles: [\r\n    `\r\n      .is-grey {\r\n        color: #aaa;\r\n      }\r\n      .has-pointer {\r\n        cursor: pointer;\r\n      }\r\n      .full-width {\r\n        width: 100%;\r\n      }\r\n    `\r\n  ]\r\n})\r\nexport class LibFormTimeComponent extends FormBase<string> implements OnInit {\r\n  @Input()\r\n  placeholder = '';\r\n  @Input()\r\n  format: number; // 12 or 24\r\n  @Input()\r\n  min: string; // 12:00 AM\r\n  @Input()\r\n  max: string; // 12:00 AM\r\n  @Input()\r\n  defaultTime: string; // 12:00 AM\r\n  @Input()\r\n  minutesGap: number; // 1 -> 60\r\n  @Input()\r\n  required: boolean;\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnInit,\r\n  ViewChild,\r\n  forwardRef\r\n} from '@angular/core';\r\nimport { SignaturePad } from 'angular2-signaturepad/signature-pad';\r\nimport { FormBase } from '../form-base-class';\r\n\r\nimport { v1 as uuidv1 } from 'uuid';\r\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'form-signature',\r\n  template: `\r\n    <h3>{{ placeholder }}</h3>\r\n    <div #container class=\"signature-container\">\r\n      <div class=\"signature-border\" [class.disabled-border]=\"disabled\">\r\n        <signature-pad\r\n          #signaturePad\r\n          [hidden]=\"disabled\"\r\n          [options]=\"signaturePadOptions\"\r\n          (onEndEvent)=\"drawComplete(signaturePad)\"\r\n        ></signature-pad>\r\n        <img [hidden]=\"!disabled\" [src]=\"this.value || blankImageSrc\" />\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [\r\n    `\r\n      h3 {\r\n        display: inline-block;\r\n        margin-bottom: 0;\r\n      }\r\n      .signature-container {\r\n        display: inline-block;\r\n        width: 100%;\r\n      }\r\n      .signature-border {\r\n        display: inline-block;\r\n        border: 1px #777 solid;\r\n        margin: 20px;\r\n        height: 200px;\r\n      }\r\n      .disabled-border {\r\n        border: 2px #aaa dotted;\r\n      }\r\n      img {\r\n        height: 100%;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormSignatureComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormSignatureComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormSignatureComponent extends FormBase<string>\r\n  implements OnInit, AfterViewInit {\r\n  @Input()\r\n  placeholder = 'Sign Here';\r\n\r\n  blankImageSrc = 'https://i.imgur.com/4StmpUT.png';\r\n\r\n  signaturePadOptions = {\r\n    minWidth: 2,\r\n    canvasWidth: 400,\r\n    canvasHeight: 200\r\n  };\r\n  @ViewChild('signaturePad', { static: false } as any)\r\n  signaturePad: ElementRef<SignaturePad>;\r\n  @ViewChild('container') container: ElementRef<HTMLDivElement>;\r\n\r\n  ngOnInit() {\r\n    this.autoCompleteObscureName = uuidv1();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.updateWidthToParent();\r\n  }\r\n\r\n  writeValue(value: any): void {\r\n    this.value = value;\r\n    this.setSignatureToPad();\r\n  }\r\n\r\n  updateWidthToParent() {\r\n    const pad = this.signaturePad.nativeElement;\r\n    if (!pad) {\r\n      return;\r\n    }\r\n    const containerWidth = this.container.nativeElement.clientWidth;\r\n    if (containerWidth < 600) {\r\n      const marginLeftAndRight = 20 * 2;\r\n      pad.set(\r\n        'canvasWidth',\r\n        containerWidth - marginLeftAndRight - 10\r\n      );\r\n    }\r\n  }\r\n\r\n  setSignatureToPad() {\r\n    // Set current signature from control\r\n    const currentSignature = this.value;\r\n    if (!this.signaturePad || !currentSignature) {\r\n      return;\r\n    }\r\n    const pad = this.signaturePad.nativeElement;\r\n    pad.fromDataURL(currentSignature);\r\n  }\r\n\r\n  drawComplete(e) {\r\n    if (!e) {\r\n      return;\r\n    }\r\n    const imgData = e.toDataURL();\r\n    this.value = imgData;\r\n  }\r\n}\r\n","import 'quill';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nexport interface QuillCounterConfig {\r\n  container: string;\r\n  units: 'words' | 'chars' | 'kb';\r\n}\r\n\r\nexport interface QuillInstance {\r\n  on: any;\r\n  getText: any;\r\n  root: any;\r\n}\r\n\r\nexport default class Counter {\r\n  quill: QuillInstance;\r\n  options: QuillCounterConfig;\r\n  updateTrigger = new Subject();\r\n\r\n  constructor(quill, options) {\r\n    this.quill = quill;\r\n    this.options = options;\r\n\r\n    const container = document.querySelector(this.options.container);\r\n\r\n    this.quill.on('text-change', () => {\r\n      this.updateTrigger.next();\r\n    });\r\n\r\n    this.updateTrigger.pipe(debounceTime(2000)).subscribe(() => {\r\n      const length = this.calculate();\r\n      container.innerHTML = length + ' ' + this.options.units;\r\n      // console.log('form-html-editor: updating counter =' + container.innerHTML);\r\n    });\r\n  }\r\n\r\n  calculate() {\r\n    const text = this.quill.getText().trim();\r\n\r\n    if (this.options.units === 'words') {\r\n      return !text ? 0 : text.split(/\\s+/).length;\r\n    }\r\n    if (this.options.units === 'kb') {\r\n      const html = this.quill.root.innerHTML;\r\n      return Math.round(html.length / 1024);\r\n    }\r\n    return text.length;\r\n  }\r\n}\r\n","export function AddQuillInlineStyles(Quill: any) {\r\n  // configure Quill to use inline styles so the email's format properly\r\n  const DirectionAttribute = Quill.import('attributors/attribute/direction');\r\n  Quill.register(DirectionAttribute, true);\r\n\r\n  const AlignClass = Quill.import('attributors/class/align');\r\n  Quill.register(AlignClass, true);\r\n\r\n  const BackgroundClass = Quill.import('attributors/class/background');\r\n  Quill.register(BackgroundClass, true);\r\n\r\n  const ColorClass = Quill.import('attributors/class/color');\r\n  Quill.register(ColorClass, true);\r\n\r\n  const DirectionClass = Quill.import('attributors/class/direction');\r\n  Quill.register(DirectionClass, true);\r\n\r\n  const FontClass = Quill.import('attributors/class/font');\r\n  Quill.register(FontClass, true);\r\n\r\n  const SizeClass = Quill.import('attributors/class/size');\r\n  Quill.register(SizeClass, true);\r\n\r\n  const AlignStyle = Quill.import('attributors/style/align');\r\n  Quill.register(AlignStyle, true);\r\n\r\n  const BackgroundStyle = Quill.import('attributors/style/background');\r\n  Quill.register(BackgroundStyle, true);\r\n\r\n  const ColorStyle = Quill.import('attributors/style/color');\r\n  Quill.register(ColorStyle, true);\r\n\r\n  const DirectionStyle = Quill.import('attributors/style/direction');\r\n  Quill.register(DirectionStyle, true);\r\n\r\n  const FontStyle = Quill.import('attributors/style/font');\r\n  Quill.register(FontStyle, true);\r\n\r\n  const SizeStyle = Quill.import('attributors/style/size');\r\n  Quill.register(SizeStyle, true);\r\n  // create new Quill instance after...\r\n\r\n  const BaseImageFormat = Quill.import('formats/image');\r\n  const ImageFormatAttributesList = ['alt', 'height', 'width', 'style'];\r\n\r\n  class ImageFormat extends BaseImageFormat {\r\n    static formats(domNode) {\r\n      return ImageFormatAttributesList.reduce((formats, attribute) => {\r\n        if (domNode.hasAttribute(attribute)) {\r\n          formats[attribute] = domNode.getAttribute(attribute);\r\n        }\r\n        return formats;\r\n      }, {});\r\n    }\r\n    format(name, value) {\r\n      if (ImageFormatAttributesList.indexOf(name) > -1) {\r\n        if (value) {\r\n          this.domNode.setAttribute(name, value);\r\n        } else {\r\n          this.domNode.removeAttribute(name);\r\n        }\r\n      } else {\r\n        super.format(name, value);\r\n      }\r\n    }\r\n  }\r\n\r\n  Quill.register(ImageFormat, true);\r\n}\r\n","import {\r\n  Component,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime, takeUntil, distinctUntilChanged } from 'rxjs/operators';\r\n\r\nimport * as QuillNamespace from 'quill';\r\nconst Quill: any = QuillNamespace;\r\nimport Counter, { QuillCounterConfig } from './editor-modules/counter';\r\n\r\nimport { ImageDrop } from 'quill-image-drop-module';\r\nimport ImageCompress from 'quill-image-compress';\r\nimport ImageResize from 'quill-image-resize-module';\r\nimport { htmlEditButton } from 'quill-html-edit-button';\r\nimport { AddQuillInlineStyles } from './editor-modules/add-quill-inline-styles';\r\nimport { SimpleLog } from '../../utils/logger';\r\n\r\nAddQuillInlineStyles(Quill);\r\n\r\nQuill.register('modules/htmlEditButton', htmlEditButton);\r\nQuill.register('modules/counter', Counter);\r\nQuill.register('modules/counterChars', Counter);\r\nQuill.register('modules/counterKiloBytes', Counter);\r\nQuill.register('modules/imageDrop', ImageDrop);\r\nQuill.register('modules/imageCompress', ImageCompress);\r\nQuill.register('modules/imageResize', ImageResize);\r\n\r\ntype conf = QuillCounterConfig;\r\n\r\n@Component({\r\n  selector: 'form-quill-editor',\r\n  template: `\r\n    <div [class.editor-disabled]=\"disabled\">\r\n      <quill-editor\r\n        (onContentChanged)=\"onContentChanged.next($event)\"\r\n        [ngModel]=\"value\"\r\n        [modules]=\"quillModulesUsed\"\r\n        [disabled]=\"disabled\"\r\n        [placeholder]=\"placeholder\"\r\n      >\r\n        <div quill-editor-toolbar>\r\n          <span class=\"ql-formats\">\r\n            <select class=\"ql-font\">\r\n              <option selected></option>\r\n              <option value=\"serif\"></option>\r\n              <option value=\"monospace\"></option>\r\n            </select>\r\n            <select class=\"ql-header\">\r\n              <option value=\"1\"></option>\r\n              <option value=\"2\"></option>\r\n              <option value=\"3\"></option>\r\n              <option value=\"4\"></option>\r\n              <option value=\"5\"></option>\r\n              <option value=\"6\"></option>\r\n              <option selected></option>\r\n            </select>\r\n          </span>\r\n          <span class=\"ql-formats\">\r\n            <button class=\"ql-bold\"></button>\r\n            <button class=\"ql-italic\"></button>\r\n            <button class=\"ql-underline\"></button>\r\n            <button class=\"ql-strike\"></button>\r\n          </span>\r\n          <span class=\"ql-formats\">\r\n            <select class=\"ql-color\"></select>\r\n            <select class=\"ql-background\"></select>\r\n          </span>\r\n          <span class=\"ql-formats\">\r\n            <button class=\"ql-list\" value=\"ordered\"></button>\r\n            <button class=\"ql-list\" value=\"bullet\"></button>\r\n            <select class=\"ql-align\">\r\n              <option selected></option>\r\n              <option value=\"center\"></option>\r\n              <option value=\"right\"></option>\r\n              <option value=\"justify\"></option>\r\n            </select>\r\n          </span>\r\n          <span class=\"ql-formats\">\r\n            <button class=\"ql-link\"></button>\r\n            <button class=\"ql-image\"></button>\r\n          </span>\r\n          <span class=\"ql-formats font12px\">\r\n            <div id=\"counter\"></div>\r\n          </span>\r\n          <span class=\"ql-formats font12px\">\r\n            <div id=\"counterChars\"></div>\r\n          </span>\r\n          <span class=\"ql-formats font12px\">\r\n            <div id=\"counterKiloBytes\"></div>\r\n          </span>\r\n        </div>\r\n      </quill-editor>\r\n    </div>\r\n  `,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormQuillEditorComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormQuillEditorComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  styles: [\r\n    `\r\n      .font12px {\r\n        font-size: 12px;\r\n      }\r\n      .editor-disabled {\r\n        filter: contrast(0.4) brightness(1.5);\r\n      }\r\n      .ql-editor {\r\n        white-space: normal !important;\r\n      }\r\n    `\r\n  ],\r\n  styleUrls: ['./quill-css/quill.snow.css', './quill-css/quill.bubble.css'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class LibFormQuillEditorComponent extends FormBase<string>\r\n  implements OnDestroy, OnInit {\r\n  @Input()\r\n  quillModules: any = {};\r\n  @Input()\r\n  maxImageWidth = 2000;\r\n  @Input()\r\n  placeholder = 'Input content here...';\r\n\r\n  quillModulesUsed: any = {};\r\n\r\n  onContentChanged = new Subject();\r\n  destroyed = new Subject();\r\n\r\n  logger: SimpleLog;\r\n\r\n  ngOnInit() {\r\n    this.logger = new SimpleLog(this.debug);\r\n    const quillModulesDefaults = {\r\n      toolbar: '#toolbar',\r\n      counter: { container: '#counter', units: 'words' } as conf,\r\n      counterChars: { container: '#counterChars', units: 'chars' } as conf,\r\n      counterKiloBytes: { container: '#counterKiloBytes', units: 'kb' } as conf,\r\n      imageDrop: true,\r\n      imageCompress: {\r\n        quality: 0.7,\r\n        maxWidth: 1200\r\n      },\r\n      clipboard: {\r\n        matchVisual: false\r\n      },\r\n      imageResize: true\r\n    };\r\n    this.quillModulesUsed = {\r\n      ...quillModulesDefaults,\r\n      ...this.quillModules\r\n    };\r\n\r\n    this.onContentChanged\r\n      .pipe(\r\n        debounceTime(1000),\r\n        takeUntil(this.destroyed),\r\n        distinctUntilChanged()\r\n      )\r\n      .subscribe((event: any) => {\r\n        const htmlValue = event.html || '<p></p>';\r\n        this.logger.log('LibFormQuillEditorComponent:', { htmlValue, event });\r\n        this.writeValue(htmlValue);\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyed.next();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport {\r\n  MatDatetimepickerModule,\r\n  MatNativeDatetimeModule\r\n} from '@mat-datetimepicker/core';\r\nimport { ColorPickerModule } from 'ngx-color-picker';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatInputModule,\r\n  MatCardModule,\r\n  MatIconModule,\r\n  MatDatepickerModule,\r\n  MatButtonModule\r\n} from '@angular/material';\r\nimport { NgxMaterialTimepickerModule } from 'ngx-material-timepicker';\r\nimport { QuillModule } from 'ngx-quill';\r\n\r\nimport { LibFormColorComponent } from './form-color.component';\r\nimport { LibFormDateComponent } from './form-date.component';\r\nimport { LibFormTimeComponent } from './form-time.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SignaturePadModule } from 'angular2-signaturepad';\r\nimport { LibFormSignatureComponent } from './form-signature.component';\r\nimport { LibFormQuillEditorComponent } from './form-quill-editor.component';\r\n\r\nconst exportedModules = [\r\n  CommonModule,\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n  MatInputModule,\r\n  MatCardModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatDatepickerModule,\r\n  MatNativeDatetimeModule,\r\n  MatDatetimepickerModule\r\n];\r\n\r\nconst exported = [\r\n  LibFormColorComponent,\r\n  LibFormDateComponent,\r\n  LibFormTimeComponent,\r\n  LibFormSignatureComponent,\r\n  LibFormQuillEditorComponent\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    ...exportedModules,\r\n    CommonModule,\r\n    SignaturePadModule,\r\n    ColorPickerModule,\r\n    QuillModule,\r\n    NgxMaterialTimepickerModule\r\n  ],\r\n  exports: [...exported, ...exportedModules],\r\n  declarations: [...exported],\r\n  providers: []\r\n})\r\nexport class MatReduceFormsUsing3rdPartyModule {}\r\n","import { Component, forwardRef, Input, OnInit, OnDestroy } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\nfunction compareObject(l1: {}, l2: {}) {\r\n  if (!l1 || !l2) {\r\n    return false;\r\n  }\r\n  let json1, json2;\r\n  try {\r\n    json1 = JSON.stringify(l1);\r\n    json2 = JSON.stringify(l2);\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n  if (json1 !== json2) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-select-object-multiple',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <mat-select\r\n        [formControl]=\"this.internalControl\"\r\n        [placeholder]=\"placeholder\"\r\n        [compareWith]=\"compareObject\"\r\n        multiple\r\n      >\r\n        <mat-select-trigger>\r\n          <div *ngIf=\"this.internalControl.value as selected\">\r\n            {{ selected?.length ? selected[0][selectionKey] : '' }}\r\n            <span\r\n              *ngIf=\"this.internalControl.value?.length > 1\"\r\n              class=\"example-additional-selection\"\r\n            >\r\n              (+{{ selected.length - 1 }}\r\n              {{ selected?.length === 2 ? 'other' : 'others' }})\r\n            </span>\r\n          </div>\r\n        </mat-select-trigger>\r\n        <mat-option\r\n          *ngFor=\"let selectionObject of selectionObjects\"\r\n          [value]=\"selectionObject\"\r\n        >\r\n          {{ selectionObject[selectionKey] }}\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n        padding-bottom: 15px;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormSelectObjectMultipleComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormSelectObjectMultipleComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormSelectObjectMultipleComponent extends FormBase<Object> {\r\n  @Input()\r\n  selectionObjects: Object[];\r\n  @Input()\r\n  selectionKey: string;\r\n\r\n  compareObject = compareObject;\r\n}\r\n","import { Component, forwardRef, Input } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-toggle',\r\n  template: `\r\n    <div class=\"full-width\">\r\n      <mat-slide-toggle\r\n        [formControl]=\"internalControl\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      >\r\n        {{ placeholder }} ({{ value ? yes : no }})\r\n      </mat-slide-toggle>\r\n    </div>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n        padding-bottom: 15px;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormToggleComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormToggleComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormToggleComponent extends FormBase<string> {\r\n  @Input()\r\n  yes = 'Yes';\r\n  @Input()\r\n  no = 'No';\r\n}\r\n","import { Component, forwardRef, Input } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-text-clearable',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <input\r\n        *ngIf=\"!disabled && !locked\"\r\n        matInput\r\n        [placeholder]=\"placeholder\"\r\n        [formControl]=\"internalControl\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        [maxlength]=\"maxlength\"\r\n        autocomplete=\"dontcompleteme\"\r\n      />\r\n      <input\r\n        *ngIf=\"disabled || locked\"\r\n        matInput\r\n        [disabled]=\"true\"\r\n        [value]=\"value\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      />\r\n      <mat-icon\r\n        matSuffix\r\n        class=\"has-pointer\"\r\n        *ngIf=\"!disabled\"\r\n        (click)=\"onClickEditLock()\"\r\n      >\r\n        {{ locked ? 'edit' : 'locked' }}\r\n      </mat-icon>\r\n      <mat-icon matSuffix *ngIf=\"disabled\" class=\"is-grey\">\r\n        edit\r\n      </mat-icon>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .is-grey {\r\n        color: grey;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormTextClearableComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormTextClearableComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormTextClearableComponent extends FormBase<string> {\r\n\r\n  @Input()\r\n  locked = true;\r\n  @Input()\r\n  maxlength: number;\r\n\r\n  onClickEditLock() {\r\n    this.locked = !this.locked;\r\n    const isEditabled = !this.locked && !this.disabled;\r\n    if (isEditabled) {\r\n      this.internalControl.enable();\r\n    } else {\r\n      this.internalControl.disable();\r\n    }\r\n  }\r\n}\r\n","import { Component, forwardRef, OnInit, OnDestroy } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\nimport {\r\n  FormControlTypeSafe,\r\n  FormBuilderTypedService\r\n} from '../../services/form-builder-typed.service';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-text-disabled',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <input\r\n        matInput\r\n        [placeholder]=\"placeholder\"\r\n        [formControl]=\"disabledControl\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      />\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormTextDisabledComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormTextDisabledComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormTextDisabledComponent extends FormBase<string>\r\n  implements OnInit {\r\n  disabledControl: FormControlTypeSafe<string>;\r\n\r\n  constructor(private fb: FormBuilderTypedService) {\r\n    super();\r\n    this.disabledControl = this.fb.control<string>({\r\n      value: '',\r\n      disabled: true\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.disabledControl.setValue(this.internalControl.value);\r\n    this.internalControl.valueChanges\r\n      .pipe(takeUntil(this._destroyed))\r\n      .subscribe(() => {\r\n        this.disabledControl.setValue(this.internalControl.value);\r\n      });\r\n  }\r\n}\r\n","import { Component, forwardRef, Input } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-text-icons',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <mat-icon matPrefix class=\"has-pointer\" *ngIf=\"prefixIcon\">\r\n        {{ prefixIcon }}\r\n      </mat-icon>\r\n      <input\r\n        matInput\r\n        [formControl]=\"internalControl\"\r\n        [maxlength]=\"maxlength\"\r\n        [placeholder]=\"placeholder\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      />\r\n      <mat-icon\r\n        matSuffix\r\n        class=\"has-pointer\"\r\n        *ngIf=\"!disabled && clearable\"\r\n        (click)=\"onClickClear()\"\r\n      >\r\n        clear\r\n      </mat-icon>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .is-grey {\r\n        color: grey;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormTextIconsComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormTextIconsComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormTextIconsComponent extends FormBase<string> {\r\n  @Input()\r\n  maxlength: number;\r\n  @Input()\r\n  clearable = true;\r\n  @Input()\r\n  prefixIcon = 'search';\r\n\r\n  onClickClear() {\r\n    this.internalControl.reset();\r\n  }\r\n}\r\n","import { Component, forwardRef, Input, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-text-password',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <input\r\n        matInput\r\n        [placeholder]=\"placeholder\"\r\n        [maxlength]=\"maxlength\"\r\n        [formControl]=\"internalControl\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n        [type]=\"inputType\"\r\n      />\r\n      <mat-icon matSuffix (click)=\"toggleHide()\">{{\r\n        hidePassword ? 'visibility_off' : 'visibility'\r\n      }}</mat-icon>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormTextPasswordComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormTextPasswordComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormTextPasswordComponent extends FormBase<string>\r\n  implements OnInit {\r\n  @Input()\r\n  maxlength: number;\r\n\r\n  get inputType() {\r\n    return this.hidePassword ? 'password' : 'text';\r\n  }\r\n\r\n  hidePassword = true;\r\n\r\n  toggleHide() {\r\n    this.hidePassword = !this.hidePassword;\r\n  }\r\n}\r\n","import { Component, forwardRef, Input, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-text',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <input\r\n        matInput\r\n        [placeholder]=\"placeholder\"\r\n        [maxlength]=\"maxlength\"\r\n        [formControl]=\"internalControl\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      />\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormTextComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormTextComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormTextComponent extends FormBase<string> implements OnInit {\r\n  @Input()\r\n  maxlength: number;\r\n}\r\n","import { Component, forwardRef, Input, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\nimport {\r\n  FormControlTypeSafe,\r\n  FormBuilderTypedService\r\n} from '../../services/form-builder-typed.service';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-textarea-disabled',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <textarea\r\n        matInput\r\n        [rows]=\"rows\"\r\n        [placeholder]=\"placeholder\"\r\n        [formControl]=\"disabledControl\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      ></textarea>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormTextAreaDisabledComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormTextAreaDisabledComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormTextAreaDisabledComponent extends FormBase<string>\r\n  implements OnInit {\r\n  @Input()\r\n  rows = 4;\r\n\r\n  disabledControl: FormControlTypeSafe<string>;\r\n\r\n  constructor(private fb: FormBuilderTypedService) {\r\n    super();\r\n    this.disabledControl = this.fb.control<string>({\r\n      value: '',\r\n      disabled: true\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.disabledControl.setValue(this.internalControl.value);\r\n    this.internalControl.valueChanges\r\n      .pipe(takeUntil(this._destroyed))\r\n      .subscribe(() => {\r\n        this.disabledControl.setValue(this.internalControl.value);\r\n      });\r\n  }\r\n}\r\n","import { Component, forwardRef, Input } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-textarea',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <textarea\r\n        matInput\r\n        [rows]=\"rows\"\r\n        [placeholder]=\"placeholder\"\r\n        [maxlength]=\"maxlength\"\r\n        [formControl]=\"internalControl\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      ></textarea>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormTextAreaComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormTextAreaComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormTextAreaComponent extends FormBase<string> {\r\n  @Input()\r\n  rows = 4;\r\n  @Input()\r\n  maxlength: number;\r\n}\r\n","import { Component, forwardRef, Input, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, FormControl } from '@angular/forms';\r\nimport { takeUntil, debounceTime, tap, delay } from 'rxjs/operators';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-toggle-reversed',\r\n  template: `\r\n    <div class=\"full-width\">\r\n      <mat-slide-toggle\r\n        [formControl]=\"reversedControl\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      >\r\n        <div class=\"flex-center\">\r\n          <ng-content></ng-content>\r\n          <span>{{ placeholder }}</span>\r\n          <span>({{ value ? yes : no }})</span>\r\n        </div>\r\n      </mat-slide-toggle>\r\n    </div>\r\n  `,\r\n  styles: [\r\n    `\r\n      span {\r\n        margin: 2px;\r\n      }\r\n      .full-width {\r\n        width: 100%;\r\n        padding-bottom: 15px;\r\n      }\r\n      .flex-center {\r\n        display: flex;\r\n        align-items: center;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormToggleReversedComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormToggleReversedComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormToggleReversedComponent extends FormBase<boolean>\r\n  implements OnInit {\r\n  @Input()\r\n  yes = 'Yes';\r\n  @Input()\r\n  no = 'No';\r\n\r\n  reversedControl = new FormControl();\r\n\r\n  private lockControl: boolean;\r\n\r\n  ngOnInit() {\r\n    this.reversedControl.valueChanges\r\n      .pipe(\r\n        takeUntil(this._destroyed),\r\n        debounceTime(100)\r\n      )\r\n      .subscribe(value => {\r\n        if (this.lockControl) {\r\n          return;\r\n        }\r\n        this.value = !value;\r\n        // console.log('reversedControl.valueChanges', { thisValue: this.value });\r\n      });\r\n\r\n    this.internalControl.valueChanges\r\n      .pipe(\r\n        takeUntil(this._destroyed),\r\n        debounceTime(100),\r\n        tap(() => (this.lockControl = true)),\r\n        delay(100),\r\n        tap(value => this.reversedControl.setValue(!value)),\r\n        delay(100),\r\n        tap(() => (this.lockControl = false))\r\n      )\r\n      .subscribe(() => {\r\n        // console.log('reversedControl.valueChanges', { thisValue: this.value });\r\n      });\r\n\r\n    this.internalControl.statusChanges\r\n      .pipe(takeUntil(this._destroyed))\r\n      .subscribe(() => {\r\n        if (this.disabled) {\r\n          this.reversedControl.disable();\r\n        } else {\r\n          this.reversedControl.enable();\r\n        }\r\n      });\r\n  }\r\n}\r\n","import { Component, forwardRef, Input, OnInit, OnDestroy } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\nfunction compareObject(l1: {}, l2: {}) {\r\n  if (!l1 || !l2) {\r\n    return false;\r\n  }\r\n  let json1, json2;\r\n  try {\r\n    json1 = JSON.stringify(l1);\r\n    json2 = JSON.stringify(l2);\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n  if (json1 !== json2) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-select-object',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <mat-select\r\n        [formControl]=\"this.internalControl\"\r\n        [placeholder]=\"placeholder\"\r\n        [compareWith]=\"compareObject\"\r\n      >\r\n        <mat-option\r\n          *ngFor=\"let selectionObject of selectionObjects\"\r\n          [value]=\"selectionObject\"\r\n        >\r\n          {{ selectionObject[selectionKey] }}\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n        padding-bottom: 15px;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormSelectObjectComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormSelectObjectComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormSelectObjectComponent extends FormBase<Object> {\r\n  @Input()\r\n  selectionObjects: Object[];\r\n  @Input()\r\n  selectionKey: string;\r\n\r\n  compareObject = compareObject;\r\n\r\n  writeValue(newVal: Object) {\r\n    this.value = newVal || {};\r\n  }\r\n}\r\n","import { Component, forwardRef, Input, OnInit, OnDestroy } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-select-string',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <mat-select\r\n        [formControl]=\"this.internalControl\"\r\n        [placeholder]=\"placeholder\"\r\n      >\r\n        <mat-option *ngFor=\"let selection of selections\" [value]=\"selection\">\r\n          {{ selection }}\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n        padding-bottom: 15px;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormSelectStringComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormSelectStringComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormSelectStringComponent extends FormBase<string> {\r\n  @Input()\r\n  selections: string[];\r\n}\r\n","// tslint:disable: variable-name\r\nimport {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n  ElementRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {\r\n  MatAutocomplete,\r\n  MatAutocompleteSelectedEvent,\r\n  MatChipInputEvent,\r\n  MatSnackBar,\r\n  MatAutocompleteTrigger\r\n} from '@angular/material';\r\nimport { FormControl, NG_VALIDATORS, NG_VALUE_ACCESSOR, AbstractControl } from '@angular/forms';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { FormBase } from '../form-base-class';\r\nimport { Tag } from './Tag';\r\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\r\n\r\nimport { v1 as uuidv1 } from 'uuid';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-tag-multiple',\r\n  template: `\r\n    <mat-form-field\r\n      [appearance]=\"appearance\"\r\n      class=\"tag-full-width\"\r\n      [class.form-tag-control-invalid]=\"hasRed()\"\r\n    >\r\n      <mat-chip-list #chipList [disabled]=\"disabled\">\r\n        <mat-chip\r\n          *ngFor=\"let tag of selectedTags\"\r\n          [selectable]=\"selectable\"\r\n          [disabled]=\"this.internalControl.disabled\"\r\n          [removable]=\"removable\"\r\n          (removed)=\"removeTagChip(tag)\"\r\n        >\r\n          {{ tag.name }}\r\n          <mat-icon\r\n            matChipRemove\r\n            *ngIf=\"removable && this.internalControl.enabled\"\r\n            >cancel</mat-icon\r\n          >\r\n        </mat-chip>\r\n        <input\r\n          [placeholder]=\"placeholder\"\r\n          #textInput\r\n          [name]=\"autoCompleteObscureName\"\r\n          autocomplete=\"dontcompleteme\"\r\n          [formControl]=\"inputTextControl\"\r\n          [matAutocomplete]=\"auto\"\r\n          [matChipInputFor]=\"chipList\"\r\n          [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n          [matChipInputAddOnBlur]=\"addOnBlur\"\r\n          (matChipInputTokenEnd)=\"addFromTextInput($event)\"\r\n          (keydown)=\"focusOnEnter($event)\"\r\n          (blur)=\"onBlur()\"\r\n        />\r\n        <mat-icon\r\n          class=\"tag-icon\"\r\n          matTooltip=\"Add tags here...\"\r\n          matBadge=\"â\"\r\n          matSuffix\r\n          >local_offer</mat-icon\r\n        >\r\n      </mat-chip-list>\r\n      <mat-autocomplete\r\n        #auto=\"matAutocomplete\"\r\n        (optionSelected)=\"optionSelectedFromList($event)\"\r\n      >\r\n        <mat-option\r\n          *ngFor=\"let choiceName of filteredTagNames$ | async\"\r\n          [value]=\"choiceName\"\r\n        >\r\n          {{ choiceName }}\r\n        </mat-option>\r\n      </mat-autocomplete>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .tag-full-width {\r\n        width: 100%;\r\n      }\r\n      .tag-icon {\r\n        color: grey;\r\n        right: 15px;\r\n      }\r\n      .tag-icon .mat-badge-content {\r\n        background-color: #afc5b000 !important;\r\n        right: 1px !important;\r\n        top: 3px !important;\r\n        color: white !important;\r\n      }\r\n      .form-tag-control-invalid .mat-form-field-label {\r\n        color: #ff4f4f !important;\r\n      }\r\n    `\r\n  ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormTagMultipleComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormTagMultipleComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormTagMultipleComponent extends FormBase<Tag[]>\r\n  implements OnInit, OnDestroy {\r\n  // EXTERNAL API\r\n  private _choices: Tag[] = [];\r\n  @Input()\r\n  set choices(newChoices) {\r\n    if (!newChoices) {\r\n      newChoices = [];\r\n    }\r\n    this._choices = newChoices;\r\n    this.inputTextControl.patchValue(this.inputTextControl.value);\r\n  }\r\n  get choices() {\r\n    return this._choices;\r\n  }\r\n  @Input() customValues: boolean;\r\n  @Input() removable = true;\r\n  @Input() filterStrategy: 'all' | 'beginning' = 'all';\r\n  @Output() addedNewTag = new EventEmitter<Tag>();\r\n\r\n  // INTERNAL\r\n\r\n  get selectedTags() {\r\n    return this.value;\r\n  }\r\n  get choicesStrings(): string[] {\r\n    return this.choices.map(t => (!!t ? t.name : ''));\r\n  }\r\n  visible = true;\r\n  selectable = true;\r\n  addOnBlur = true;\r\n  separatorKeysCodes: number[] = [ENTER, COMMA];\r\n  inputTextControl = new FormControl();\r\n  filteredTagNames$: Observable<string[]>;\r\n\r\n  @ViewChild('textInput', {} as any) textInput: ElementRef<HTMLInputElement>;\r\n  @ViewChild('textInput', { read: MatAutocompleteTrigger } as any)\r\n  matAutocompleteTrigger: MatAutocompleteTrigger;\r\n  @ViewChild('auto', {} as any)\r\n  matAutocomplete: MatAutocomplete;\r\n\r\n  destroyed = new Subject<void>();\r\n\r\n  constructor(private snack: MatSnackBar) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.filteredTagNames$ = this.inputTextControl.valueChanges.pipe(\r\n      startWith(null),\r\n      map((tagName: string | null) =>\r\n        tagName ? this._filter(tagName) : this.getChoicesMinusSelected()\r\n      )\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyed.next();\r\n  }\r\n\r\n  writeValue(newVal: Tag[]) {\r\n    this.value = newVal || [];\r\n  }\r\n\r\n  private getChoicesMinusSelected(): string[] {\r\n    const alreadySelectedSet = new Set(this.selectedTags.map(t => t.name));\r\n    return this.choicesStrings.filter(\r\n      choice => !alreadySelectedSet.has(choice)\r\n    );\r\n  }\r\n\r\n  private _filter(value: string): string[] {\r\n    const choices = this.getChoicesMinusSelected();\r\n    if (this.filterStrategy === 'all') {\r\n      return _filterAll();\r\n    } else {\r\n      return _filterBeginning();\r\n    }\r\n    function _filterAll(): string[] {\r\n      const filterValue = value.toLowerCase();\r\n      return choices.filter(choice =>\r\n        (choice + '').toLowerCase().includes(filterValue)\r\n      );\r\n    }\r\n    function _filterBeginning(): string[] {\r\n      const filterValue = value.toLowerCase();\r\n      return choices.filter(\r\n        choice => (choice + '').toLowerCase().indexOf(filterValue) === 0\r\n      );\r\n    }\r\n  }\r\n\r\n  onBlur() {\r\n    this.CheckValueIsValid();\r\n  }\r\n\r\n  removeTagChip(tagToRemove: Tag) {\r\n    this.log('removeTagChip', { tagToRemove });\r\n    this.matAutocompleteTrigger.closePanel();\r\n    this.value = this.value.filter(t => t.id !== tagToRemove.id);\r\n    this.inputTextControl.setValue(null);\r\n    this.inputTextControl.markAsTouched();\r\n  }\r\n\r\n  async addFromTextInput(event: MatChipInputEvent): Promise<void> {\r\n    const value = event.value;\r\n    const inputTrimmed = (value || '').trim();\r\n    if (!inputTrimmed) {\r\n      this.resetTextInput();\r\n      return;\r\n    }\r\n    this.log('addFromTextInput', { value: event.value });\r\n    // Add fruit only when MatAutocomplete is not open\r\n    // To make sure this does not conflict with OptionSelected Event\r\n    const found = this.choices.find(c => c.name === inputTrimmed);\r\n    if (found) {\r\n      this.log('addFromTextInput() found match, adding that instead of making new tag');\r\n      this.addedTagToInternalValue(found);\r\n      this.resetTextInput();\r\n      return;\r\n    }\r\n    if (!this.customValues && this.matAutocomplete.isOpen) {\r\n      // this.resetTextInput();\r\n      return;\r\n    }\r\n    if (!this.customValues) {\r\n      this.resetTextInput();\r\n      this.snack.open('Must select item from list', 'Close', {\r\n        duration: 3000,\r\n        horizontalPosition: 'center',\r\n        verticalPosition: 'bottom'\r\n      });\r\n      this.log('addFromTextInput() unable to add custom values...');\r\n      return;\r\n    }\r\n    this.resetTextInput();\r\n    const newTag = await this.makeNewTag(inputTrimmed);\r\n    this.addedNewTag.emit(newTag);\r\n    this.choices.push(newTag);\r\n    this.addedTagToInternalValue(newTag);\r\n    this.notify(`Adding \"${newTag.name}\" to the global list...`);\r\n    this.log('addFromTextInput() added new tag', { newTag });\r\n  }\r\n\r\n  resetTextInput() {\r\n    // Reset the input value\r\n    this.textInput.nativeElement.value = '';\r\n    this.inputTextControl.setValue(null);\r\n  }\r\n\r\n  optionSelectedFromList(event: MatAutocompleteSelectedEvent): void {\r\n    this.log('optionSelectedFromList()', {\r\n      event,\r\n      value: event.option.viewValue\r\n    });\r\n    const autoCompleteValue = event.option.viewValue;\r\n    const selectedTag = [...(this.choices || [])]\r\n      .filter(tag => tag.name === autoCompleteValue)\r\n      .pop();\r\n    if (!selectedTag) {\r\n      this.warn(\r\n        'optionSelectedFromList() not sure how autocomplete selected something not in the list...'\r\n      );\r\n      return;\r\n    }\r\n    this.addedTagToInternalValue(selectedTag);\r\n    this.textInput.nativeElement.value = '';\r\n    this.textInput.nativeElement.blur();\r\n    this.inputTextControl.setValue(null);\r\n  }\r\n\r\n  async makeNewTag(name): Promise<Tag> {\r\n    const newTagId = uuidv1();\r\n    const newTag: Tag = {\r\n      id: newTagId,\r\n      name: name.trim()\r\n    };\r\n    return newTag;\r\n  }\r\n\r\n  private addedTagToInternalValue(newTag: Tag) {\r\n    const currentValue = [...(this.value || [])];\r\n    currentValue.push(newTag);\r\n    this.value = currentValue;\r\n  }\r\n\r\n  focusOnEnter(e: KeyboardEvent) {\r\n    if (e.keyCode === 13) {\r\n      this.log('enter key pressed', { key: e.key, code: e.keyCode });\r\n      setTimeout(() => {\r\n        this.textInput.nativeElement.focus();\r\n      });\r\n    }\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    if (isDisabled) {\r\n      this.inputTextControl.disable();\r\n    } else {\r\n      this.inputTextControl.enable();\r\n    }\r\n    super.setDisabledState(isDisabled);\r\n  }\r\n\r\n  hasRed() {\r\n    const isDirty = this.inputTextControl.touched || this.inputTextControl.dirty;\r\n    const isInValid = this.internalControl.invalid;\r\n    return isDirty && isInValid;\r\n  }\r\n\r\n  notify(message: string) {\r\n    this.snack.open(message, 'Close', {\r\n      duration: 3000,\r\n      horizontalPosition: 'center',\r\n      verticalPosition: 'bottom'\r\n    });\r\n  }\r\n\r\n  log(msg: string, obj?: any) {\r\n    if (!obj) {\r\n      return console.log('form-tag-multiple: ', msg);\r\n    }\r\n    console.log('form-tag-multiple: ', msg, obj);\r\n  }\r\n\r\n  warn(msg: string, obj?: any) {\r\n    if (!obj) {\r\n      return console.log('form-tag-multiple: ', msg);\r\n    }\r\n    console.warn('form-tag-multiple: ', msg, obj);\r\n  }\r\n\r\n  CheckValueIsValid() {\r\n    if (!this.internalControl || !this.internalControl.validator) {\r\n      return;\r\n    }\r\n    const validator = this.internalControl.validator({} as AbstractControl);\r\n    const isRequired = validator && validator.required;\r\n    if (!isRequired) {\r\n      return null;\r\n    }\r\n    if (!Array.isArray(this.value)) {\r\n      return 'form value is not an array';\r\n    }\r\n    if (!this.value.length) {\r\n      return 'form value is required but has no value';\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","// tslint:disable: variable-name\r\nimport {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n  ElementRef\r\n} from '@angular/core';\r\nimport {\r\n  MatAutocomplete,\r\n  MatAutocompleteSelectedEvent,\r\n  MatChipInputEvent,\r\n  MatSnackBar,\r\n  MatAutocompleteTrigger\r\n} from '@angular/material';\r\nimport { FormControl, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { map, startWith, takeUntil } from 'rxjs/operators';\r\nimport { ConfirmationService } from '../../dialogs/app-confirmation.component';\r\nimport { FormBase } from '../form-base-class';\r\nimport { Tag } from './Tag';\r\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\r\n\r\nimport { v1 as uuidv1 } from 'uuid';\r\nimport { SimpleLog } from '../../utils/logger';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-tag-single',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <mat-chip-list #chipList [disabled]=\"disabled\">\r\n        <mat-chip\r\n          *ngIf=\"selectedTag as tag\"\r\n          [selectable]=\"selectable\"\r\n          [removable]=\"removable\"\r\n          (removed)=\"removeTagChip(tag)\"\r\n          [disabled]=\"disabled\"\r\n        >\r\n          {{ tag.name }}\r\n          <mat-icon matChipRemove *ngIf=\"removable && !disabled\"\r\n            >cancel</mat-icon\r\n          >\r\n        </mat-chip>\r\n        <input\r\n          [placeholder]=\"placeholder\"\r\n          #textInput\r\n          [name]=\"autoCompleteObscureName\"\r\n          autocomplete=\"dontcompleteme\"\r\n          [formControl]=\"inputTextControl\"\r\n          [matAutocomplete]=\"auto\"\r\n          [matChipInputFor]=\"chipList\"\r\n          [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n          [matChipInputAddOnBlur]=\"addOnBlur\"\r\n          (matChipInputTokenEnd)=\"addFromTextInput($event)\"\r\n          (keydown)=\"focusOnEnter($event)\"\r\n        />\r\n        <mat-icon\r\n          class=\"is-grey r15\"\r\n          matTooltip=\"Add a single tag here, you can manage all your tags using the tag list editor in the settings menu\"\r\n          matBadge=\"1\"\r\n          matSuffix\r\n          >local_offer</mat-icon\r\n        >\r\n      </mat-chip-list>\r\n      <mat-autocomplete\r\n        #auto=\"matAutocomplete\"\r\n        (optionSelected)=\"optionSelectedFromList($event)\"\r\n      >\r\n        <mat-option\r\n          *ngFor=\"let choiceName of filteredTagNames$ | async\"\r\n          [value]=\"choiceName\"\r\n        >\r\n          {{ choiceName }}\r\n        </mat-option>\r\n      </mat-autocomplete>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n      }\r\n      .is-grey {\r\n        color: grey;\r\n      }\r\n      .r15 {\r\n        right: 15px;\r\n      }\r\n      mat-icon span {\r\n        background-color: #afc5b000;\r\n        right: 1px !important;\r\n        top: 3px !important;\r\n        color: white;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormTagSingleComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormTagSingleComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormTagSingleComponent extends FormBase<Tag>\r\n  implements OnInit, OnDestroy {\r\n  // EXTERNAL API\r\n  private _choices: Tag[];\r\n  @Input()\r\n  set choices(newChoices) {\r\n    if (!newChoices) {\r\n      newChoices = [];\r\n    }\r\n    this._choices = newChoices;\r\n    this.inputTextControl.patchValue(this.inputTextControl.value);\r\n  }\r\n  get choices() {\r\n    return this._choices;\r\n  }\r\n  @Input() customValues: boolean;\r\n  @Input() filterStrategy: 'all' | 'beginning' = 'all';\r\n  @Input() removable = true;\r\n  @Output() addedNewTag = new EventEmitter<Tag>();\r\n\r\n  // INTERNAL\r\n\r\n  get selectedTag() {\r\n    return this.value;\r\n  }\r\n  get choicesStrings(): string[] {\r\n    return this.choices.map(t => (!!t ? t.name : ''));\r\n  }\r\n  visible = true;\r\n  selectable = true;\r\n  addOnBlur = true;\r\n  separatorKeysCodes: number[] = [ENTER, COMMA];\r\n  inputTextControl = new FormControl();\r\n  filteredTagNames$: Observable<string[]>;\r\n\r\n  @ViewChild('textInput', {} as any) textInput: ElementRef<HTMLInputElement>;\r\n  @ViewChild('textInput', { read: MatAutocompleteTrigger } as any)\r\n  matAutocompleteTrigger: MatAutocompleteTrigger;\r\n  @ViewChild('auto', {} as any)\r\n  matAutocomplete: MatAutocomplete;\r\n\r\n  destroyed = new Subject<void>();\r\n  logger: SimpleLog;\r\n\r\n  constructor(\r\n    private confirm: ConfirmationService,\r\n    private snack: MatSnackBar\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.checkExists(this.choices, 'this.selectChoices$');\r\n    this.logger = new SimpleLog(this.debug);\r\n\r\n    this.filteredTagNames$ = this.inputTextControl.valueChanges.pipe(\r\n      startWith(null),\r\n      map((tagName: string | null) =>\r\n        tagName ? this._filter(tagName) : this.getChoicesMinusSelected()\r\n      )\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyed.next();\r\n  }\r\n\r\n  writeValue(newVal: Tag) {\r\n    this.value = newVal;\r\n  }\r\n\r\n  private getChoicesMinusSelected(): string[] {\r\n    const selectedTagName = this.selectedTag ? this.selectedTag.name : '';\r\n    const alreadySelectedSet = new Set([selectedTagName]);\r\n    return this.choicesStrings.filter(\r\n      choice => !alreadySelectedSet.has(choice)\r\n    );\r\n  }\r\n\r\n  private _filter(value: string): string[] {\r\n    const choices = this.getChoicesMinusSelected();\r\n    if (this.filterStrategy === 'all') {\r\n      return _filterAll();\r\n    } else {\r\n      return _filterBeginning();\r\n    }\r\n    function _filterAll(): string[] {\r\n      const filterValue = value.toLowerCase();\r\n      return choices.filter(choice =>\r\n        (choice + '').toLowerCase().includes(filterValue)\r\n      );\r\n    }\r\n    function _filterBeginning(): string[] {\r\n      const filterValue = value.toLowerCase();\r\n      return choices.filter(\r\n        choice => (choice + '').toLowerCase().indexOf(filterValue) === 0\r\n      );\r\n    }\r\n  }\r\n\r\n  checkExists(val, name) {\r\n    if (val == null) {\r\n      throw new Error(name + ' has not been defined');\r\n    }\r\n  }\r\n\r\n  removeTagChip(tagToRemove: Tag) {\r\n    this.logger.log('removeTagChip', { tagToRemove });\r\n    this.matAutocompleteTrigger.closePanel();\r\n    this.value = null;\r\n    this.inputTextControl.setValue(null);\r\n  }\r\n\r\n  async addFromTextInput(event: MatChipInputEvent): Promise<void> {\r\n    const value = event.value;\r\n    const inputTrimmed = (value || '').trim();\r\n    if (!inputTrimmed) {\r\n      this.resetTextInput();\r\n      return;\r\n    }\r\n    this.logger.log('addFromTextInput', { value: event.value });\r\n    // Add fruit only when MatAutocomplete is not open\r\n    // To make sure this does not conflict with OptionSelected Event\r\n    const found = this.choices.find(c => c.name === inputTrimmed);\r\n    if (found) {\r\n      this.logger.log('addFromTextInput() found match, adding that instead of making new tag');\r\n      this.addedTagToInternalValue(found);\r\n      this.resetTextInput();\r\n      return;\r\n    }\r\n    if (!this.customValues && this.matAutocomplete.isOpen) {\r\n      // this.resetTextInput();\r\n      return;\r\n    }\r\n    if (!this.customValues) {\r\n      this.resetTextInput();\r\n      this.snack.open('Must select item from list', 'Close', {\r\n        duration: 3000,\r\n        horizontalPosition: 'center',\r\n        verticalPosition: 'bottom'\r\n      });\r\n      this.logger.log('addFromTextInput() unable to add custom values...');\r\n      return;\r\n    }\r\n    this.resetTextInput();\r\n    const confirmed = await this.confirm.AskConfirm(\r\n      `Are you sure you want to add: \"${inputTrimmed}\" to the global list?`\r\n    );\r\n    if (!confirmed) {\r\n      this.logger.log('addFromTextInput() not confirmed, nothing changed...');\r\n      this.notify('Nothing added globally');\r\n      return;\r\n    }\r\n    const newTag = await this.makeNewTag(inputTrimmed);\r\n    this.addedNewTag.emit(newTag);\r\n    this.choices.push(newTag);\r\n    this.addedTagToInternalValue(newTag);\r\n    this.notify(`Adding \"${newTag.name}\" to the global list...`);\r\n    this.logger.log('addFromTextInput() added new tag', { newTag, confirmed });\r\n  }\r\n\r\n  resetTextInput() {\r\n    // Reset the input value\r\n    this.textInput.nativeElement.value = '';\r\n    this.inputTextControl.setValue('');\r\n  }\r\n\r\n  optionSelectedFromList(event: MatAutocompleteSelectedEvent): void {\r\n    this.logger.log('optionSelectedFromList()', {\r\n      event,\r\n      value: event.option.viewValue\r\n    });\r\n    const autoCompleteValue = event.option.viewValue;\r\n    const selectedTag = [...(this.choices || [])]\r\n      .filter(tag => tag.name === autoCompleteValue)\r\n      .pop();\r\n    if (!selectedTag) {\r\n      this.logger.warn(\r\n        'optionSelectedFromList() not sure how autocomplete selected something not in the list...'\r\n      );\r\n      return;\r\n    }\r\n    this.addedTagToInternalValue(selectedTag);\r\n    this.textInput.nativeElement.value = '';\r\n    this.textInput.nativeElement.blur();\r\n    this.inputTextControl.setValue(null);\r\n  }\r\n\r\n  async makeNewTag(name): Promise<Tag> {\r\n    const newTagId = uuidv1();\r\n    const newTag: Tag = {\r\n      id: newTagId,\r\n      name: name.trim()\r\n    };\r\n    return newTag;\r\n  }\r\n\r\n  private addedTagToInternalValue(newTag: Tag) {\r\n    this.value = newTag;\r\n  }\r\n\r\n  focusOnEnter(e: KeyboardEvent) {\r\n    if (e.keyCode === 13) {\r\n      this.logger.log('enter key pressed', { key: e.key, code: e.keyCode });\r\n      setTimeout(() => {\r\n        this.textInput.nativeElement.focus();\r\n      });\r\n    }\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    if (isDisabled) {\r\n      this.inputTextControl.disable();\r\n    } else {\r\n      this.inputTextControl.enable();\r\n    }\r\n    super.setDisabledState(isDisabled);\r\n  }\r\n\r\n  notify(message: string) {\r\n    this.snack.open(message, 'Close', {\r\n      duration: 3000,\r\n      horizontalPosition: 'center',\r\n      verticalPosition: 'bottom'\r\n    });\r\n  }\r\n}\r\n","import { Component, forwardRef, Input, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-number',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <input\r\n        matInput\r\n        type=\"number\"\r\n        [min]=\"min\"\r\n        [max]=\"max\"\r\n        [step]=\"step\"\r\n        [placeholder]=\"placeholder\"\r\n        [formControl]=\"internalControl\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      />\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormNumberComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormNumberComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormNumberComponent extends FormBase<number> implements OnInit {\r\n  @Input()\r\n  min = 0;\r\n  @Input()\r\n  max = 100;\r\n  @Input()\r\n  step = 1;\r\n}\r\n","import { Component, forwardRef, Input, OnInit, OnDestroy } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-select-string-multiple',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <mat-select\r\n        [formControl]=\"this.internalControl\"\r\n        [placeholder]=\"placeholder\"\r\n        multiple\r\n      >\r\n        <mat-select-trigger>\r\n          <div *ngIf=\"this.internalControl.value as selected\">\r\n            {{ selected?.length ? selected[0] : '' }}\r\n            <span\r\n              *ngIf=\"this.internalControl.value?.length > 1\"\r\n              class=\"example-additional-selection\"\r\n            >\r\n              (+{{ selected.length - 1 }}\r\n              {{ selected?.length === 2 ? 'other' : 'others' }})\r\n            </span>\r\n          </div>\r\n        </mat-select-trigger>\r\n        <mat-option *ngFor=\"let selection of selections\" [value]=\"selection\">\r\n          {{ selection }}\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n        padding-bottom: 15px;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormSelectStringMultipleComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormSelectStringMultipleComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormSelectStringMultipleComponent extends FormBase<string[]> {\r\n  @Input()\r\n  selections: string[];\r\n}\r\n","import { NgModule } from '@angular/core';\nimport {\n  MatSnackBarModule,\n  MatInputModule,\n  MatSlideToggleModule,\n  MatChipsModule,\n  MatCardModule,\n  MatButtonModule,\n  MatBadgeModule,\n  MatDialogModule,\n  MatAutocompleteModule,\n  MatFormFieldModule,\n  MatIconModule,\n  MatSelectModule,\n  MatCheckboxModule,\n  MatTooltipModule,\n  MatProgressSpinnerModule\n} from '@angular/material';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { LibFormSelectObjectMultipleComponent } from './form-select-object-multiple.component';\nimport { LibFormToggleComponent } from './form-toggle.component';\nimport { LibFormTextClearableComponent } from './form-text-clearable.component';\nimport { LibFormTextDisabledComponent } from './form-text-disabled.component';\nimport { LibFormTextIconsComponent } from './form-text-icons.component';\nimport { LibFormTextPasswordComponent } from './form-text-password.component';\nimport { LibFormTextComponent } from './form-text.component';\nimport { LibFormTextAreaDisabledComponent } from './form-textarea-disabled.component';\nimport { LibFormTextAreaComponent } from './form-textarea.component';\nimport { LibFormToggleReversedComponent } from './form-toggle-reversed.component';\nimport { LibFormSelectObjectComponent } from './form-select-object.component';\nimport { LibFormSelectStringComponent } from './form-select-string.component';\nimport { LibFormTagMultipleComponent } from './form-tag-multiple.component';\nimport { LibFormTagSingleComponent } from './form-tag-single.component';\nimport { LibFormNumberComponent } from './form-number.component';\nimport { LibFormSelectStringMultipleComponent } from './form-select-string-multiple.component';\n\nconst exportedModules = [\n  CommonModule,\n  FormsModule,\n  ReactiveFormsModule,\n  MatSnackBarModule,\n  MatInputModule,\n  MatSlideToggleModule,\n  MatChipsModule,\n  MatCardModule,\n  MatButtonModule,\n  MatBadgeModule,\n  MatDialogModule,\n  MatAutocompleteModule,\n  MatFormFieldModule,\n  MatIconModule,\n  MatSelectModule,\n  MatCheckboxModule,\n  MatTooltipModule,\n  MatProgressSpinnerModule\n];\n\nconst exported = [\n  LibFormNumberComponent,\n  LibFormSelectObjectComponent,\n  LibFormSelectObjectMultipleComponent,\n  LibFormSelectStringComponent,\n  LibFormSelectStringMultipleComponent,\n  LibFormTagMultipleComponent,\n  LibFormTagSingleComponent,\n  LibFormTextAreaComponent,\n  LibFormTextAreaDisabledComponent,\n  LibFormTextClearableComponent,\n  LibFormTextComponent,\n  LibFormTextDisabledComponent,\n  LibFormTextIconsComponent,\n  LibFormTextPasswordComponent,\n  LibFormToggleComponent,\n  LibFormToggleReversedComponent,\n];\n\n@NgModule({\n  imports: [...exportedModules],\n  exports: [...exported, ...exportedModules],\n  declarations: [...exported],\n  providers: []\n})\nexport class MatReduceFormsUsingMaterialModule {}\n","import { Tag } from '../material/Tag';\n\nexport interface Assignee {\n  selected_tag?: Tag;\n  selected_obj?: any;\n  assignee_id?: string;\n  type: AssigneeType;\n  name: string;\n  email: string;\n  mobile?: string;\n}\n\nexport enum AssigneeType {\n  contractor = 'Contractor',\n  staffMember = 'Staff Member',\n  myDetails = 'My Details',\n}\n\nexport interface User {\n  id?: string;\n  Email: string;\n  'First Name': string;\n  'Last Name': string;\n  Phone: string;\n}\n\nexport interface StaffMember {\n  id?: string;\n  name?: string;\n  email?: string;\n  phone?: string;\n}\n\nexport interface Contractor {\n  id?: string;\n  contactsArray?: Contact[];\n}\n\nexport interface Contact {\n  id: string;\n  name?: string;\n  email?: string;\n  phone?: string;\n}\n\nexport function blankContact(): Contact {\n  return {\n    id: '',\n    name: '',\n    email: '',\n    phone: '',\n  };\n}\n\n","import { Contractor, blankContact } from './form-assignee.models';\n\nexport function GetFirstContact(c: Contractor) {\n  if (!c) {\n    const blank = blankContact();\n    blank.name = 'NO CONTRACTOR FOUND';\n    return blank;\n  }\n  if (c.contactsArray && !!c.contactsArray.length) {\n    return c.contactsArray[0];\n  }\n  const blank = blankContact();\n  blank.name = 'NO CONTACT FOUND';\n  return blank;\n}\n","import { Component, Input, OnDestroy, OnInit, forwardRef } from '@angular/core';\r\nimport { FormControl, NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\r\nimport { Subject, pipe } from 'rxjs';\r\nimport { FormBase } from '../form-base-class';\r\nimport { Tag } from '../material/Tag';\r\nimport { takeUntil, auditTime, tap } from 'rxjs/operators';\r\nimport {\r\n  FormControlTypeSafe,\r\n  FormBuilderTypedService\r\n} from '../../services/form-builder-typed.service';\r\nimport {\r\n  Assignee,\r\n  AssigneeType,\r\n  User,\r\n  StaffMember,\r\n  Contractor\r\n} from './form-assignee.models';\r\nimport { GetFirstContact } from './contact-helper';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-assignee-selector',\r\n  template: `\r\n    <mat-card>\r\n      <div class=\"import\">\r\n        <form-select-string\r\n          [formControl]=\"this.selectImportTypeControl\"\r\n          [selections]=\"this.assigneeTypes\"\r\n          placeholder=\"Assignee Type\"\r\n        >\r\n        </form-select-string>\r\n        <form-tag-single\r\n          placeholder=\"Select Contractor\"\r\n          [hidden]=\"this.hideSelectContractor\"\r\n          [formControl]=\"this.selectItemContractorControl\"\r\n          [choices]=\"contractorsList\"\r\n          [customValues]=\"false\"\r\n        >\r\n        </form-tag-single>\r\n\r\n        <form-tag-single\r\n          placeholder=\"Select Staff Member\"\r\n          [hidden]=\"this.hideSelectStaff\"\r\n          [formControl]=\"this.selectItemStaffControl\"\r\n          [choices]=\"staffList\"\r\n          [customValues]=\"false\"\r\n        >\r\n        </form-tag-single>\r\n      </div>\r\n      <div *ngIf=\"!(this.value && this.value.name)\">\r\n        Please select an assignee\r\n      </div>\r\n      <div *ngIf=\"this.value as selectedAssignee\">\r\n        <h3>Selected Assignee:</h3>\r\n        <div class=\"assignee\">\r\n          <p>\r\n            Name: <strong>{{ selectedAssignee.name }}</strong>\r\n          </p>\r\n          <p>\r\n            Email: <strong>{{ selectedAssignee.email }}</strong>\r\n          </p>\r\n          <p>\r\n            Phone: <strong>{{ selectedAssignee.mobile }}</strong>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </mat-card>\r\n  `,\r\n  styles: [\r\n    `\r\n      .import {\r\n        display: grid;\r\n        grid-template-columns: 100%;\r\n        grid-gap: 2%;\r\n        margin-bottom: 10px;\r\n      }\r\n      .assignee p {\r\n        margin: 0;\r\n      }\r\n      .assignee h3 {\r\n        margin: 0;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormAssigneeSelectorComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormAssigneeSelectorComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormAssigneeSelectorComponent extends FormBase<Assignee>\r\n  implements OnInit, OnDestroy {\r\n  @Input()\r\n  currentUser: User;\r\n  @Input()\r\n  contractorsList: Tag[];\r\n  @Input()\r\n  staffList: Tag[];\r\n\r\n  selectImportTypeControl: FormControlTypeSafe<string>;\r\n  selectItemContractorControl: FormControlTypeSafe<Tag>;\r\n  selectItemStaffControl: FormControlTypeSafe<Tag>;\r\n\r\n  assigneeTypes: string[] = Object.keys(AssigneeType).map(k => AssigneeType[k]);\r\n\r\n  hideSelectContractor = true;\r\n  hideSelectStaff = true;\r\n\r\n  destroyed = new Subject();\r\n\r\n  constructor(private fb: FormBuilderTypedService) {\r\n    super();\r\n    this.selectImportTypeControl = this.fb.control<AssigneeType>();\r\n    this.selectItemContractorControl = this.fb.control<Tag>();\r\n    this.selectItemStaffControl = this.fb.control<Tag>();\r\n  }\r\n\r\n  makeLogPipe(logString: string) {\r\n    return pipe(\r\n      takeUntil(this.destroyed),\r\n      auditTime(300),\r\n      tap(val => console.log('assignee-selector: ', logString, { val }))\r\n    );\r\n  }\r\n\r\n  checkStatus(control: FormControl, disabled: boolean) {\r\n    if (disabled && !control.disabled) {\r\n      control.disable();\r\n    }\r\n    if (!disabled && control.disabled) {\r\n      control.enable();\r\n    }\r\n  }\r\n\r\n  async ngOnInit() {\r\n    // Check if main control has been disabled/enabled\r\n    this.internalControl.statusChanges\r\n      .pipe(this.makeLogPipe('control.statusChanges'))\r\n      .subscribe(newVal => {\r\n        const disabled = newVal === 'DISABLED';\r\n        this.checkStatus(this.selectImportTypeControl, disabled);\r\n        this.checkStatus(this.selectItemStaffControl, disabled);\r\n        this.checkStatus(this.selectItemContractorControl, disabled);\r\n      });\r\n    // Check if import type has changed\r\n    this.selectImportTypeControl.valueChanges\r\n      .pipe(this.makeLogPipe('selectImportTypeControl.valueChanges'))\r\n      .subscribe(val => {\r\n        if (val === AssigneeType.myDetails) {\r\n          return this.handleSelectedMyDetails();\r\n        }\r\n        if (val === AssigneeType.contractor) {\r\n          this.hideSelectContractor = false;\r\n          this.hideSelectStaff = true;\r\n        }\r\n        if (val === AssigneeType.staffMember) {\r\n          this.hideSelectStaff = false;\r\n          this.hideSelectContractor = true;\r\n        }\r\n      });\r\n    // Check if selectItemContractorControl has changed\r\n    this.selectItemContractorControl.valueChanges\r\n      .pipe(this.makeLogPipe('selectItemContractorControl.valueChanges'))\r\n      .subscribe(async (val: Tag) => {\r\n        return this.handleSelectedSingleContractor(val);\r\n      });\r\n    // Check if selectItemStaffControl has changed\r\n    this.selectItemStaffControl.valueChanges\r\n      .pipe(this.makeLogPipe('selectItemStaffControl.valueChanges'))\r\n      .subscribe(async (val: Tag) => {\r\n        return this.handleSelectedSingleStaff(val);\r\n      });\r\n    const currentValue = this.value;\r\n    if (currentValue) {\r\n      this.selectImportTypeControl.patchValue(currentValue.type);\r\n      if (currentValue.type === AssigneeType.contractor) {\r\n        this.selectItemContractorControl.patchValue(currentValue.selected_tag);\r\n      }\r\n      if (currentValue.type === AssigneeType.staffMember) {\r\n        this.selectItemStaffControl.patchValue(currentValue.selected_tag);\r\n      }\r\n    }\r\n  }\r\n\r\n  async ngOnDestroy() {\r\n    this.destroyed.next();\r\n  }\r\n\r\n  get selectedImportType() {\r\n    return this.selectImportTypeControl.value;\r\n  }\r\n\r\n  async handleSelectedSingleStaff(selected: Tag) {\r\n    if (!selected) {\r\n      console.warn('assignee-selector: no staff selected', { selected });\r\n      return;\r\n    }\r\n    const staffMember = selected.obj as StaffMember;\r\n    const newAssignee: Assignee = {\r\n      selected_tag: selected,\r\n      assignee_id: selected.id,\r\n      type: AssigneeType.staffMember,\r\n      name: staffMember.name,\r\n      email: staffMember.email,\r\n      mobile: staffMember.phone\r\n    };\r\n    console.log('assignee-selector: handleSelectedSingleStaff', {\r\n      selected,\r\n      newAssignee\r\n    });\r\n    this.value = newAssignee;\r\n  }\r\n\r\n  async handleSelectedSingleContractor(selected: Tag) {\r\n    if (!selected) {\r\n      console.warn('assignee-selector: no contractor selected', { selected });\r\n      return;\r\n    }\r\n    const contractor = selected.obj as Contractor;\r\n    const contact = GetFirstContact(contractor);\r\n    const newAssignee: Assignee = {\r\n      selected_tag: selected,\r\n      assignee_id: selected.id,\r\n      type: AssigneeType.contractor,\r\n      name: contact.name,\r\n      email: contact.email,\r\n      mobile: contact.phone\r\n    };\r\n    this.value = newAssignee;\r\n    console.log('assignee-selector: handleSelectedSingleContractor', {\r\n      this_value: this.value,\r\n      selected,\r\n      newAssignee\r\n    });\r\n  }\r\n\r\n  async handleSelectedMyDetails() {\r\n    this.hideSelectStaff = true;\r\n    this.hideSelectContractor = true;\r\n    const user = this.currentUser;\r\n    console.log(\r\n      'assignee-selector: handleSelectedMyDetails() importing my details',\r\n      {\r\n        user\r\n      }\r\n    );\r\n    const newAssignee: Assignee = {\r\n      selected_obj: user,\r\n      assignee_id: user.id,\r\n      type: AssigneeType.myDetails,\r\n      name: user['First Name'] + ' ' + user['Last Name'],\r\n      email: user.Email || '',\r\n      mobile: user.Phone || ''\r\n    };\r\n    this.value = newAssignee;\r\n    console.log('assignee-selector: handleSelectedMyDetails() newAssignee', {\r\n      newAssignee\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatCardModule, MatIconModule } from '@angular/material';\n\nimport { MatReduceFormsUsingMaterialModule } from '../material/forms-material.module';\nimport { LibFormAssigneeSelectorComponent } from './form-assignee-selector.component';\n\nconst exportedModules = [\n  CommonModule,\n  FormsModule,\n  ReactiveFormsModule,\n  MatIconModule,\n  MatCardModule,\n  MatReduceFormsUsingMaterialModule\n];\n\nconst exported = [LibFormAssigneeSelectorComponent];\n\n@NgModule({\n  imports: [...exportedModules],\n  exports: [...exported, ...exportedModules],\n  declarations: [...exported],\n  providers: []\n})\nexport class MatReduceFormsComposedModule {}\n","import { NgModule } from '@angular/core';\r\nimport {\r\n  AppConfirmationDialogComponent,\r\n  ConfirmationService\r\n} from './dialogs/app-confirmation.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\n\r\nimport { FormBuilderTypedService } from './services/form-builder-typed.service';\r\nimport { MatReduceFormsUsing3rdPartyModule } from './controls/using-3rd-party/forms-3rd-party.module';\r\nimport { MatReduceFormsUsingMaterialModule } from './controls/material/forms-material.module';\r\nimport { MatReduceFormsComposedModule } from './controls/composed/forms-composed.module';\r\nimport { MatIconModule } from '@angular/material';\r\n\r\nconst exportedModules = [\r\n  MatReduceFormsUsing3rdPartyModule,\r\n  MatReduceFormsUsingMaterialModule,\r\n  MatReduceFormsComposedModule,\r\n  CommonModule,\r\n  ReactiveFormsModule,\r\n  FormsModule\r\n];\r\n\r\n@NgModule({\r\n  entryComponents: [AppConfirmationDialogComponent],\r\n  declarations: [AppConfirmationDialogComponent],\r\n  exports: [...exportedModules],\r\n  imports: [MatIconModule, ...exportedModules],\r\n  providers: [ConfirmationService, FormBuilderTypedService]\r\n})\r\nexport class MatReduceModule {}\r\n","export interface Tag {\n  id: string;\n  name: string;\n  obj?: {};\n}\n","export interface TagObject {\n  id: string;\n  fileicon?: string;\n  imageurl?: string;\n  value: {\n    name: string;\n    props?: {\n      thumb?: string;\n      fileicon?: string;\n    };\n  };\n}\n\n"],"names":["uuidv4","uuidv1","compareObject","exportedModules","exported"],"mappings":"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"}