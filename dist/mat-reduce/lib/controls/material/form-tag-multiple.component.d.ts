import { EventEmitter, OnDestroy, OnInit, ElementRef } from '@angular/core';
import { MatAutocomplete, MatAutocompleteSelectedEvent, MatChipInputEvent, MatSnackBar, MatAutocompleteTrigger } from '@angular/material';
import { FormControl } from '@angular/forms';
import { Observable, Subject } from 'rxjs';
import { FormBase } from '../form-base-class';
import { Tag } from './Tag';
export declare class LibFormTagMultipleComponent extends FormBase<Tag[]> implements OnInit, OnDestroy {
    private snack;
    private _choices;
    choices: any;
    customValues: boolean;
    removable: boolean;
    filterStrategy: 'all' | 'beginning';
    addedNewTag: EventEmitter<Tag>;
    readonly selectedTags: Tag[];
    readonly choicesStrings: string[];
    visible: boolean;
    selectable: boolean;
    addOnBlur: boolean;
    separatorKeysCodes: number[];
    inputTextControl: FormControl;
    filteredTagNames$: Observable<string[]>;
    textInput: ElementRef<HTMLInputElement>;
    matAutocompleteTrigger: MatAutocompleteTrigger;
    matAutocomplete: MatAutocomplete;
    destroyed: Subject<void>;
    constructor(snack: MatSnackBar);
    ngOnInit(): void;
    ngOnDestroy(): void;
    writeValue(newVal: Tag[]): void;
    private getChoicesMinusSelected;
    private _filter;
    onBlur(): void;
    removeTagChip(tagToRemove: Tag): void;
    addFromTextInput(event: MatChipInputEvent): Promise<void>;
    resetTextInput(): void;
    optionSelectedFromList(event: MatAutocompleteSelectedEvent): void;
    makeNewTag(name: any): Promise<Tag>;
    private addedTagToInternalValue;
    focusOnEnter(e: KeyboardEvent): void;
    setDisabledState?(isDisabled: boolean): void;
    hasRed(): boolean;
    notify(message: string): void;
    log(msg: string, obj?: any): void;
    warn(msg: string, obj?: any): void;
    CheckValueIsValid(): "form value is not an array" | "form value is required but has no value";
}
