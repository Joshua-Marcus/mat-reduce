/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { MatSnackBarModule, MatInputModule, MatSlideToggleModule, MatChipsModule, MatCardModule, MatButtonModule, MatBadgeModule, MatDialogModule, MatAutocompleteModule, MatFormFieldModule, MatIconModule, MatSelectModule, MatCheckboxModule, MatTooltipModule, MatProgressSpinnerModule } from '@angular/material';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { LibFormSelectObjectMultipleComponent } from './form-select-object-multiple.component';
import { LibFormToggleComponent } from './form-toggle.component';
import { LibFormTextClearableComponent } from './form-text-clearable.component';
import { LibFormTextDisabledComponent } from './form-text-disabled.component';
import { LibFormTextIconsComponent } from './form-text-icons.component';
import { LibFormTextPasswordComponent } from './form-text-password.component';
import { LibFormTextComponent } from './form-text.component';
import { LibFormTextAreaDisabledComponent } from './form-textarea-disabled.component';
import { LibFormTextAreaComponent } from './form-textarea.component';
import { LibFormToggleReversedComponent } from './form-toggle-reversed.component';
import { LibFormSelectObjectComponent } from './form-select-object.component';
import { LibFormSelectStringComponent } from './form-select-string.component';
import { LibFormTagMultipleComponent } from './form-tag-multiple.component';
import { LibFormTagSingleComponent } from './form-tag-single.component';
import { LibFormNumberComponent } from './form-number.component';
import { LibFormSelectStringMultipleComponent } from './form-select-string-multiple.component';
/** @type {?} */
const exportedModules = [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    MatSnackBarModule,
    MatInputModule,
    MatSlideToggleModule,
    MatChipsModule,
    MatCardModule,
    MatButtonModule,
    MatBadgeModule,
    MatDialogModule,
    MatAutocompleteModule,
    MatFormFieldModule,
    MatIconModule,
    MatSelectModule,
    MatCheckboxModule,
    MatTooltipModule,
    MatProgressSpinnerModule
];
/** @type {?} */
const exported = [
    LibFormNumberComponent,
    LibFormSelectObjectComponent,
    LibFormSelectObjectMultipleComponent,
    LibFormSelectStringComponent,
    LibFormSelectStringMultipleComponent,
    LibFormTagMultipleComponent,
    LibFormTagSingleComponent,
    LibFormTextAreaComponent,
    LibFormTextAreaDisabledComponent,
    LibFormTextClearableComponent,
    LibFormTextComponent,
    LibFormTextDisabledComponent,
    LibFormTextIconsComponent,
    LibFormTextPasswordComponent,
    LibFormToggleComponent,
    LibFormToggleReversedComponent,
];
export class MatReduceFormsUsingMaterialModule {
}
MatReduceFormsUsingMaterialModule.decorators = [
    { type: NgModule, args: [{
                imports: [...exportedModules],
                exports: [...exported, ...exportedModules],
                declarations: [...exported],
                providers: []
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybXMtbWF0ZXJpYWwubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWF0LXJlZHVjZS8iLCJzb3VyY2VzIjpbImxpYi9jb250cm9scy9tYXRlcmlhbC9mb3Jtcy1tYXRlcmlhbC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixjQUFjLEVBQ2Qsb0JBQW9CLEVBQ3BCLGNBQWMsRUFDZCxhQUFhLEVBQ2IsZUFBZSxFQUNmLGNBQWMsRUFDZCxlQUFlLEVBQ2YscUJBQXFCLEVBQ3JCLGtCQUFrQixFQUNsQixhQUFhLEVBQ2IsZUFBZSxFQUNmLGlCQUFpQixFQUNqQixnQkFBZ0IsRUFDaEIsd0JBQXdCLEVBQ3pCLE1BQU0sbUJBQW1CLENBQUM7QUFDM0IsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsb0NBQW9DLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUMvRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNoRixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUN0RixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNsRixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUM1RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsb0NBQW9DLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQzs7TUFFekYsZUFBZSxHQUFHO0lBQ3RCLFlBQVk7SUFDWixXQUFXO0lBQ1gsbUJBQW1CO0lBQ25CLGlCQUFpQjtJQUNqQixjQUFjO0lBQ2Qsb0JBQW9CO0lBQ3BCLGNBQWM7SUFDZCxhQUFhO0lBQ2IsZUFBZTtJQUNmLGNBQWM7SUFDZCxlQUFlO0lBQ2YscUJBQXFCO0lBQ3JCLGtCQUFrQjtJQUNsQixhQUFhO0lBQ2IsZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFDaEIsd0JBQXdCO0NBQ3pCOztNQUVLLFFBQVEsR0FBRztJQUNmLHNCQUFzQjtJQUN0Qiw0QkFBNEI7SUFDNUIsb0NBQW9DO0lBQ3BDLDRCQUE0QjtJQUM1QixvQ0FBb0M7SUFDcEMsMkJBQTJCO0lBQzNCLHlCQUF5QjtJQUN6Qix3QkFBd0I7SUFDeEIsZ0NBQWdDO0lBQ2hDLDZCQUE2QjtJQUM3QixvQkFBb0I7SUFDcEIsNEJBQTRCO0lBQzVCLHlCQUF5QjtJQUN6Qiw0QkFBNEI7SUFDNUIsc0JBQXNCO0lBQ3RCLDhCQUE4QjtDQUMvQjtBQVFELE1BQU0sT0FBTyxpQ0FBaUM7OztZQU43QyxRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFLENBQUMsR0FBRyxlQUFlLENBQUM7Z0JBQzdCLE9BQU8sRUFBRSxDQUFDLEdBQUcsUUFBUSxFQUFFLEdBQUcsZUFBZSxDQUFDO2dCQUMxQyxZQUFZLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQztnQkFDM0IsU0FBUyxFQUFFLEVBQUU7YUFDZCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBNYXRTbmFja0Jhck1vZHVsZSxcbiAgTWF0SW5wdXRNb2R1bGUsXG4gIE1hdFNsaWRlVG9nZ2xlTW9kdWxlLFxuICBNYXRDaGlwc01vZHVsZSxcbiAgTWF0Q2FyZE1vZHVsZSxcbiAgTWF0QnV0dG9uTW9kdWxlLFxuICBNYXRCYWRnZU1vZHVsZSxcbiAgTWF0RGlhbG9nTW9kdWxlLFxuICBNYXRBdXRvY29tcGxldGVNb2R1bGUsXG4gIE1hdEZvcm1GaWVsZE1vZHVsZSxcbiAgTWF0SWNvbk1vZHVsZSxcbiAgTWF0U2VsZWN0TW9kdWxlLFxuICBNYXRDaGVja2JveE1vZHVsZSxcbiAgTWF0VG9vbHRpcE1vZHVsZSxcbiAgTWF0UHJvZ3Jlc3NTcGlubmVyTW9kdWxlXG59IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgTGliRm9ybVNlbGVjdE9iamVjdE11bHRpcGxlQ29tcG9uZW50IH0gZnJvbSAnLi9mb3JtLXNlbGVjdC1vYmplY3QtbXVsdGlwbGUuY29tcG9uZW50JztcbmltcG9ydCB7IExpYkZvcm1Ub2dnbGVDb21wb25lbnQgfSBmcm9tICcuL2Zvcm0tdG9nZ2xlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBMaWJGb3JtVGV4dENsZWFyYWJsZUNvbXBvbmVudCB9IGZyb20gJy4vZm9ybS10ZXh0LWNsZWFyYWJsZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgTGliRm9ybVRleHREaXNhYmxlZENvbXBvbmVudCB9IGZyb20gJy4vZm9ybS10ZXh0LWRpc2FibGVkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBMaWJGb3JtVGV4dEljb25zQ29tcG9uZW50IH0gZnJvbSAnLi9mb3JtLXRleHQtaWNvbnMuY29tcG9uZW50JztcbmltcG9ydCB7IExpYkZvcm1UZXh0UGFzc3dvcmRDb21wb25lbnQgfSBmcm9tICcuL2Zvcm0tdGV4dC1wYXNzd29yZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTGliRm9ybVRleHRDb21wb25lbnQgfSBmcm9tICcuL2Zvcm0tdGV4dC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTGliRm9ybVRleHRBcmVhRGlzYWJsZWRDb21wb25lbnQgfSBmcm9tICcuL2Zvcm0tdGV4dGFyZWEtZGlzYWJsZWQuY29tcG9uZW50JztcbmltcG9ydCB7IExpYkZvcm1UZXh0QXJlYUNvbXBvbmVudCB9IGZyb20gJy4vZm9ybS10ZXh0YXJlYS5jb21wb25lbnQnO1xuaW1wb3J0IHsgTGliRm9ybVRvZ2dsZVJldmVyc2VkQ29tcG9uZW50IH0gZnJvbSAnLi9mb3JtLXRvZ2dsZS1yZXZlcnNlZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTGliRm9ybVNlbGVjdE9iamVjdENvbXBvbmVudCB9IGZyb20gJy4vZm9ybS1zZWxlY3Qtb2JqZWN0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBMaWJGb3JtU2VsZWN0U3RyaW5nQ29tcG9uZW50IH0gZnJvbSAnLi9mb3JtLXNlbGVjdC1zdHJpbmcuY29tcG9uZW50JztcbmltcG9ydCB7IExpYkZvcm1UYWdNdWx0aXBsZUNvbXBvbmVudCB9IGZyb20gJy4vZm9ybS10YWctbXVsdGlwbGUuY29tcG9uZW50JztcbmltcG9ydCB7IExpYkZvcm1UYWdTaW5nbGVDb21wb25lbnQgfSBmcm9tICcuL2Zvcm0tdGFnLXNpbmdsZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgTGliRm9ybU51bWJlckNvbXBvbmVudCB9IGZyb20gJy4vZm9ybS1udW1iZXIuY29tcG9uZW50JztcbmltcG9ydCB7IExpYkZvcm1TZWxlY3RTdHJpbmdNdWx0aXBsZUNvbXBvbmVudCB9IGZyb20gJy4vZm9ybS1zZWxlY3Qtc3RyaW5nLW11bHRpcGxlLmNvbXBvbmVudCc7XG5cbmNvbnN0IGV4cG9ydGVkTW9kdWxlcyA9IFtcbiAgQ29tbW9uTW9kdWxlLFxuICBGb3Jtc01vZHVsZSxcbiAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgTWF0U25hY2tCYXJNb2R1bGUsXG4gIE1hdElucHV0TW9kdWxlLFxuICBNYXRTbGlkZVRvZ2dsZU1vZHVsZSxcbiAgTWF0Q2hpcHNNb2R1bGUsXG4gIE1hdENhcmRNb2R1bGUsXG4gIE1hdEJ1dHRvbk1vZHVsZSxcbiAgTWF0QmFkZ2VNb2R1bGUsXG4gIE1hdERpYWxvZ01vZHVsZSxcbiAgTWF0QXV0b2NvbXBsZXRlTW9kdWxlLFxuICBNYXRGb3JtRmllbGRNb2R1bGUsXG4gIE1hdEljb25Nb2R1bGUsXG4gIE1hdFNlbGVjdE1vZHVsZSxcbiAgTWF0Q2hlY2tib3hNb2R1bGUsXG4gIE1hdFRvb2x0aXBNb2R1bGUsXG4gIE1hdFByb2dyZXNzU3Bpbm5lck1vZHVsZVxuXTtcblxuY29uc3QgZXhwb3J0ZWQgPSBbXG4gIExpYkZvcm1OdW1iZXJDb21wb25lbnQsXG4gIExpYkZvcm1TZWxlY3RPYmplY3RDb21wb25lbnQsXG4gIExpYkZvcm1TZWxlY3RPYmplY3RNdWx0aXBsZUNvbXBvbmVudCxcbiAgTGliRm9ybVNlbGVjdFN0cmluZ0NvbXBvbmVudCxcbiAgTGliRm9ybVNlbGVjdFN0cmluZ011bHRpcGxlQ29tcG9uZW50LFxuICBMaWJGb3JtVGFnTXVsdGlwbGVDb21wb25lbnQsXG4gIExpYkZvcm1UYWdTaW5nbGVDb21wb25lbnQsXG4gIExpYkZvcm1UZXh0QXJlYUNvbXBvbmVudCxcbiAgTGliRm9ybVRleHRBcmVhRGlzYWJsZWRDb21wb25lbnQsXG4gIExpYkZvcm1UZXh0Q2xlYXJhYmxlQ29tcG9uZW50LFxuICBMaWJGb3JtVGV4dENvbXBvbmVudCxcbiAgTGliRm9ybVRleHREaXNhYmxlZENvbXBvbmVudCxcbiAgTGliRm9ybVRleHRJY29uc0NvbXBvbmVudCxcbiAgTGliRm9ybVRleHRQYXNzd29yZENvbXBvbmVudCxcbiAgTGliRm9ybVRvZ2dsZUNvbXBvbmVudCxcbiAgTGliRm9ybVRvZ2dsZVJldmVyc2VkQ29tcG9uZW50LFxuXTtcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogWy4uLmV4cG9ydGVkTW9kdWxlc10sXG4gIGV4cG9ydHM6IFsuLi5leHBvcnRlZCwgLi4uZXhwb3J0ZWRNb2R1bGVzXSxcbiAgZGVjbGFyYXRpb25zOiBbLi4uZXhwb3J0ZWRdLFxuICBwcm92aWRlcnM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIE1hdFJlZHVjZUZvcm1zVXNpbmdNYXRlcmlhbE1vZHVsZSB7fVxuIl19