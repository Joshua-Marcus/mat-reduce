{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://mat-reduce/lib/dialogs/app-confirmation.component.ts","ng://mat-reduce/lib/services/form-builder-typed.service.ts","ng://mat-reduce/lib/controls/form-base-class.ts","ng://mat-reduce/lib/utils/case-helper.ts","ng://mat-reduce/lib/controls/using-3rd-party/form-color.component.ts","ng://mat-reduce/lib/utils/logger.ts","ng://mat-reduce/lib/controls/using-3rd-party/form-date.component.ts","ng://mat-reduce/lib/controls/using-3rd-party/form-time.component.ts","ng://mat-reduce/lib/controls/using-3rd-party/form-signature.component.ts","ng://mat-reduce/lib/controls/using-3rd-party/editor-modules/counter.ts","ng://mat-reduce/lib/controls/using-3rd-party/form-quill-editor.component.ts","ng://mat-reduce/lib/controls/using-3rd-party/editor-modules/add-quill-inline-styles.ts","ng://mat-reduce/lib/controls/using-3rd-party/forms-3rd-party.module.ts","ng://mat-reduce/lib/controls/material/form-select-object-multiple.component.ts","ng://mat-reduce/lib/controls/material/form-toggle.component.ts","ng://mat-reduce/lib/controls/material/form-text-clearable.component.ts","ng://mat-reduce/lib/controls/material/form-text-disabled.component.ts","ng://mat-reduce/lib/controls/material/form-text-icons.component.ts","ng://mat-reduce/lib/controls/material/form-text-password.component.ts","ng://mat-reduce/lib/controls/material/form-text.component.ts","ng://mat-reduce/lib/controls/material/form-textarea-disabled.component.ts","ng://mat-reduce/lib/controls/material/form-textarea.component.ts","ng://mat-reduce/lib/controls/material/form-toggle-reversed.component.ts","ng://mat-reduce/lib/controls/material/form-select-object.component.ts","ng://mat-reduce/lib/controls/material/form-select-string.component.ts","ng://mat-reduce/lib/controls/material/form-tag-multiple.component.ts","ng://mat-reduce/lib/controls/material/form-tag-single.component.ts","ng://mat-reduce/lib/controls/material/form-number.component.ts","ng://mat-reduce/lib/controls/material/form-select-string-multiple.component.ts","ng://mat-reduce/lib/controls/material/forms-material.module.ts","ng://mat-reduce/lib/controls/composed/form-assignee.models.ts","ng://mat-reduce/lib/controls/composed/form-assignee-selector.component.ts","ng://mat-reduce/lib/controls/composed/contact-helper.ts","ng://mat-reduce/lib/controls/composed/forms-composed.module.ts","ng://mat-reduce/lib/mat-reduce.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__read","o","m","r","ar","error","__spread","concat","AppConfirmationDialogComponent","dialogRef","data","message","okIcon","okLabel","ngOnInit","okButton","focus","onClickCancel","preventDefault","close","onSubmitOk","Component","args","selector","template","MatDialogRef","Inject","MAT_DIALOG_DATA","ViewChild","ConfirmationService","dialog","AskConfirm","confirmationMessage","open","width","hasBackdrop","disableClose","afterClosed","pipe","take","toPromise","_a","console","log","Injectable","MatDialog","FormControlWithLabel","validators","_this","_super","tslib_1.__extends","FormControl","FormArrayWithLabel","FormArray","FormGroupTypeSafe","setValue","newValue","FormGroup","FormArrayTypeSafe","at","index","FormControlTypeSafe","FormBuilderTypedService","control","formState","validatorOrOpts","asyncValidator","array","controlsConfig","extra","group","gr","getPropertyName","propertyFunction","toString","split","splice","join","getSafe","getStr","get","setControlSafe","setControl","FormBuilder","FormBase","internalControl","_destroyed","Subject","disabled","debug","propagateOnChange","onTouched","originalOnDestroy","ngOnDestroy","destroy","originalOnInit","init","allowAutoComplete","autoCompleteObscureName","uuidv4","valueChanges","takeUntil","auditTime","subscribe","_value","onChange","placeholder","nameParsed","formControlName","replace","trim","map","charAt","toUpperCase","substr","toLowerCase","defineProperty","val","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","setTimeout","disable","enable","validate","c","errors","setValidators","validator","validationError","valid","inputValue","CheckValueIsValid","Input","LibFormColorComponent","defaultColor","onClickClear","stopPropagation","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NG_VALIDATORS","SimpleLog","bind","any","_i","warn","LibFormDateComponent","logger","AfterDate","isAfterToday","Date","formValue","formDate","isAfterDate","todaysDate","isNewDateAfterThis","toDateString","afterDate","getTime","Error","afterSeconds","formSeconds","isAfter","LibFormTimeComponent","LibFormSignatureComponent","blankImageSrc","signaturePadOptions","minWidth","canvasWidth","canvasHeight","uuidv1","ngAfterViewInit","updateWidthToParent","setSignatureToPad","pad","signaturePad","nativeElement","containerWidth","container","clientWidth","set","currentSignature","fromDataURL","drawComplete","imgData","toDataURL","static","Counter","quill","options","updateTrigger","document","querySelector","on","debounceTime","calculate","innerHTML","units","text","getText","html","root","Math","round","Quill","QuillNamespace","DirectionAttribute","import","register","AlignClass","BackgroundClass","ColorClass","DirectionClass","FontClass","SizeClass","AlignStyle","BackgroundStyle","ColorStyle","DirectionStyle","FontStyle","SizeStyle","BaseImageFormat","ImageFormatAttributesList","ImageFormat","formats","domNode","reduce","attribute","hasAttribute","getAttribute","format","name","indexOf","setAttribute","removeAttribute","AddQuillInlineStyles","htmlEditButton","ImageDrop","ImageCompress","ImageResize","LibFormQuillEditorComponent","quillModules","maxImageWidth","quillModulesUsed","onContentChanged","destroyed","toolbar","counter","counterChars","counterKiloBytes","imageDrop","imageCompress","quality","maxWidth","clipboard","matchVisual","imageResize","distinctUntilChanged","event","htmlValue","encapsulation","ViewEncapsulation","None","exportedModules","CommonModule","FormsModule","ReactiveFormsModule","MatInputModule","MatCardModule","MatIconModule","MatButtonModule","MatDatepickerModule","MatNativeDatetimeModule","MatDatetimepickerModule","exported","MatReduceFormsUsing3rdPartyModule","NgModule","imports","SignaturePadModule","ColorPickerModule","QuillModule","NgxMaterialTimepickerModule","exports","declarations","compareObject","l1","l2","json1","json2","JSON","stringify","LibFormSelectObjectMultipleComponent","LibFormToggleComponent","yes","no","LibFormTextClearableComponent","locked","onClickEditLock","LibFormTextDisabledComponent","fb","disabledControl","LibFormTextIconsComponent","clearable","prefixIcon","reset","LibFormTextPasswordComponent","hidePassword","toggleHide","LibFormTextComponent","LibFormTextAreaDisabledComponent","rows","LibFormTextAreaComponent","LibFormToggleReversedComponent","reversedControl","lockControl","tap","delay","statusChanges","LibFormSelectObjectComponent","newVal","LibFormSelectStringComponent","LibFormTagMultipleComponent","snack","_choices","removable","filterStrategy","addedNewTag","EventEmitter","visible","selectable","addOnBlur","separatorKeysCodes","ENTER","COMMA","inputTextControl","newChoices","patchValue","choices","filteredTagNames$","startWith","tagName","_filter","getChoicesMinusSelected","alreadySelectedSet","Set","selectedTags","choicesStrings","filter","choice","has","filterValue","includes","_filterBeginning","onBlur","removeTagChip","tagToRemove","matAutocompleteTrigger","closePanel","id","markAsTouched","addFromTextInput","inputTrimmed","found","find","addedTagToInternalValue","resetTextInput","customValues","matAutocomplete","isOpen","makeNewTag","duration","horizontalPosition","verticalPosition","newTag","emit","notify","textInput","optionSelectedFromList","option","viewValue","autoCompleteValue","selectedTag","tslib_1.__spread","tag","blur","newTagId","currentValue","focusOnEnter","keyCode","key","code","hasRed","isDirty","touched","dirty","isInValid","invalid","msg","obj","required","isArray","MatSnackBar","Output","read","MatAutocompleteTrigger","LibFormTagSingleComponent","confirm","checkExists","selectedTagName","confirmed","LibFormNumberComponent","min","max","LibFormSelectStringMultipleComponent","MatSnackBarModule","MatSlideToggleModule","MatChipsModule","MatBadgeModule","MatDialogModule","MatAutocompleteModule","MatFormFieldModule","MatSelectModule","MatCheckboxModule","MatTooltipModule","MatProgressSpinnerModule","MatReduceFormsUsingMaterialModule","contractor","staffMember","myDetails","LibFormAssigneeSelectorComponent","assigneeTypes","keys","AssigneeType","k","hideSelectContractor","hideSelectStaff","selectImportTypeControl","selectItemContractorControl","selectItemStaffControl","makeLogPipe","logString","checkStatus","handleSelectedMyDetails","handleSelectedSingleContractor","handleSelectedSingleStaff","type","selected_tag","selected","newAssignee","assignee_id","email","mobile","phone","contact","blank_1","contactsArray","blank","GetFirstContact","this_value","user","currentUser","selected_obj","Email","Phone","MatReduceFormsComposedModule","MatReduceModule","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\r\n  Component,\r\n  Inject,\r\n  Injectable,\r\n  OnInit,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport {\r\n  MAT_DIALOG_DATA,\r\n  MatButton,\r\n  MatDialog,\r\n  MatDialogRef\r\n} from '@angular/material';\r\nimport { take } from 'rxjs/operators';\r\n\r\ninterface ConfirmationDialogData {\r\n  message: string;\r\n  okIcon?: string;\r\n  okLabel?: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-confirmation-dialog',\r\n  template: `\r\n    <p class=\"title is-centered\">Confirm</p>\r\n    <p class=\"subtitle is-centered\">{{ message }}</p>\r\n    <form (submit)=\"onSubmitOk()\" class=\"buttons\">\r\n      <button #okButton mat-raised-button color=\"primary\" type=\"submit\">\r\n        <mat-icon>{{ okIcon }}</mat-icon>\r\n        <span>{{ okLabel }}</span>\r\n      </button>\r\n      <button mat-raised-button color=\"white\" (click)=\"onClickCancel($event)\">\r\n        <mat-icon>cancel</mat-icon>\r\n        <span>Cancel</span>\r\n      </button>\r\n    </form>\r\n  `,\r\n  styles: [\r\n    `\r\n      .title {\r\n        font-size: 1.8em;\r\n        margin: 0px;\r\n      }\r\n      .subtitle {\r\n        color: grey;\r\n        margin: 0px;\r\n        font-size: 1.4em;\r\n      }\r\n      .buttons {\r\n        display: flex;\r\n        justify-content: center;\r\n        margin-top: 10px;\r\n      }\r\n      button {\r\n        margin-left: 10px;\r\n        margin-right: 10px;\r\n      }\r\n    `\r\n  ]\r\n})\r\nexport class AppConfirmationDialogComponent implements OnInit {\r\n  @ViewChild('okButton', {} as any) okButton: MatButton;\r\n\r\n  message: string;\r\n  okIcon: string;\r\n  okLabel: string;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AppConfirmationDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: ConfirmationDialogData\r\n  ) {\r\n    this.message = data.message;\r\n    this.okIcon = data.okIcon ? data.okIcon : 'done';\r\n    this.okLabel = data.okLabel ? data.okLabel : 'Ok';\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.okButton && this.okButton.focus) {\r\n      this.okButton.focus();\r\n    }\r\n  }\r\n\r\n  onClickCancel(e): void {\r\n    e.preventDefault();\r\n    this.dialogRef.close(false);\r\n  }\r\n\r\n  onSubmitOk(): void {\r\n    this.dialogRef.close(true);\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class ConfirmationService {\r\n  constructor(private dialog: MatDialog) {}\r\n\r\n  async AskConfirm(\r\n    confirmationMessage: string,\r\n    okLabel?: string,\r\n    okIcon?: string\r\n  ): Promise<boolean> {\r\n    const data = {\r\n      message: confirmationMessage,\r\n      okIcon: okIcon,\r\n      okLabel: okLabel\r\n    } as ConfirmationDialogData;\r\n    const dialogRef = this.dialog.open(AppConfirmationDialogComponent, {\r\n      width: '300px',\r\n      hasBackdrop: true,\r\n      disableClose: false,\r\n      data: data\r\n    });\r\n\r\n    const result: boolean = await dialogRef\r\n      .afterClosed()\r\n      .pipe(take(1))\r\n      .toPromise();\r\n    console.log(`Confirmation-Service: AskConfirm=${!!result}`);\r\n    return result;\r\n  }\r\n}\r\n","import {\r\n  AbstractControl,\r\n  FormArray,\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  ValidatorFn,\r\n  AbstractControlOptions,\r\n  AsyncValidatorFn\r\n} from '@angular/forms';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport class FormControlWithLabel extends FormControl {\r\n  constructor(value: any, validators: any, public label: string) {\r\n    super(value, validators);\r\n  }\r\n}\r\n\r\nexport class FormArrayWithLabel extends FormArray {\r\n  constructor(value: any, validators: any, public label: string) {\r\n    super(value, validators);\r\n  }\r\n}\r\n\r\nexport type FormGroupControlsOf<T> = {\r\n  [P in keyof T]: FormControl | FormGroup | FormArray | FormControlWithLabel\r\n};\r\n\r\nexport abstract class FormGroupTypeSafe<T> extends FormGroup {\r\n  // give the value a custom type s\r\n  value: T;\r\n  label: string;\r\n  setValue(newValue: T) {\r\n    super.setValue(newValue);\r\n  }\r\n\r\n  // create helper methods to achieve this syntax eg: this.form.getSafe(x => x.heroName).patchValue('Himan')\r\n  public abstract getSafe(\r\n    propertyFunction: (typeVal: T) => any\r\n  ): AbstractControl;\r\n  public abstract setControlSafe(\r\n    propertyFunction: (typeVal: T) => any,\r\n    control: AbstractControl\r\n  ): void;\r\n  // If you need more function implement declare them here but implement them on FormBuilderTypedService.group instantiation.\r\n}\r\n\r\nexport abstract class FormArrayTypeSafe<T> extends FormArray {\r\n  value: T[];\r\n  at(index: number): FormControlTypeSafe<T> | FormGroupTypeSafe<T> {\r\n    return super.at(index) as any;\r\n  }\r\n}\r\n\r\nexport abstract class FormControlTypeSafe<T> extends FormControl {\r\n  value: T;\r\n  valueChanges: Observable<T>;\r\n  setValue(newValue: T) {\r\n    super.setValue(newValue);\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class FormBuilderTypedService extends FormBuilder {\r\n  control<T>(\r\n    formState?: any,\r\n    validatorOrOpts?:\r\n      | ValidatorFn\r\n      | ValidatorFn[]\r\n      | AbstractControlOptions\r\n      | null,\r\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null\r\n  ): FormControlTypeSafe<T> {\r\n    const control = super.control(\r\n      formState,\r\n      validatorOrOpts,\r\n      asyncValidator\r\n    ) as FormControlTypeSafe<T>;\r\n    return control;\r\n  }\r\n  array<T>(\r\n    controlsConfig:\r\n      | FormGroupControlsOf<T>[]\r\n      | FormGroupTypeSafe<T>[]\r\n      | FormControlTypeSafe<T>[],\r\n    extra?: {\r\n      [key: string]: any;\r\n    } | null\r\n  ): FormArrayTypeSafe<T> {\r\n    const arr = super.array(controlsConfig, extra) as FormArrayTypeSafe<T>;\r\n\r\n    return arr;\r\n  }\r\n  // override group to be type safe\r\n  group<T>(\r\n    controlsConfig: FormGroupControlsOf<T>,\r\n    extra?: {\r\n      [key: string]: any;\r\n    } | null\r\n  ): FormGroupTypeSafe<T> {\r\n    /*NOTE the return FormGroupTypeSafe<T> */\r\n\r\n    // instantiate group from angular type\r\n    const gr = super.group(controlsConfig, extra) as FormGroupTypeSafe<T>;\r\n    if (extra) {\r\n      gr.label = extra['label'];\r\n    }\r\n\r\n    const getPropertyName = (propertyFunction: Function): string => {\r\n      //  https://github.com/dsherret/ts-nameof - helped me with the code below, THANX!!!!\r\n      // propertyFunction.toString() sample value:\r\n      //   function(x) { return x.hero.address.postcode;}\r\n      // we need the 'hero.address.postcode'\r\n      // for gr.get('hero.address.postcode') function\r\n      const properties = propertyFunction\r\n        .toString()\r\n        .split('.')\r\n        .splice(1);\r\n\r\n      const r = properties.join('.');\r\n      return r;\r\n    };\r\n\r\n    if (gr) {\r\n      // implement getSafe method\r\n      gr.getSafe = (propertyFunction: (typeVal: T) => any): AbstractControl => {\r\n        const getStr = getPropertyName(propertyFunction);\r\n        // console.log(getStr);\r\n        const p = gr.get(getStr) as FormGroupTypeSafe<T>;\r\n        return p;\r\n      };\r\n\r\n      // implement setControlSafe\r\n      gr.setControlSafe = (\r\n        propertyFunction: (typeVal: T) => any,\r\n        control: AbstractControl\r\n      ): void => {\r\n        const getStr = getPropertyName(propertyFunction);\r\n        // console.log(getStr);\r\n        gr.setControl(getStr, control);\r\n      };\r\n    }\r\n\r\n    return gr;\r\n  }\r\n}\r\n","import { ControlValueAccessor, FormControl, Validator, ValidatorFn, Validators } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { OnDestroy, OnInit, Input } from '@angular/core';\r\nimport { takeUntil, auditTime } from 'rxjs/operators';\r\nimport { ConvertToTitleCase } from '../utils/case-helper';\r\nimport {v4 as uuidv4 } from 'uuid';\r\n\r\nexport class FormBase<T>\r\n  implements OnInit, OnDestroy, ControlValueAccessor, Validator {\r\n  internalControl: FormControl = new FormControl();\r\n  autoCompleteObscureName: string;\r\n  _destroyed = new Subject();\r\n\r\n  disabled = false;\r\n  validationError: string;\r\n  _validators: ValidatorFn;\r\n\r\n  _value: T;\r\n\r\n  @Input()\r\n  appearance: 'outline' | 'fill' | 'standard';\r\n  @Input()\r\n  allowAutoComplete: boolean;\r\n  @Input()\r\n  formControlName: string;\r\n  @Input()\r\n  placeholder: string;\r\n  @Input()\r\n  debug = false;\r\n\r\n  constructor() {\r\n    // Garrentee that init and destroy are called\r\n    // even if ngOnInit() or ngOnDestroy() are overriden\r\n    const originalOnDestroy = this.ngOnDestroy;\r\n    this.ngOnDestroy = () => {\r\n      this.destroy();\r\n      originalOnDestroy.apply(this);\r\n    };\r\n    const originalOnInit = this.ngOnInit;\r\n    this.ngOnInit = () => {\r\n      this.init();\r\n      originalOnInit.apply(this);\r\n    };\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnDestroy() {}\r\n\r\n  init() {\r\n    this._destroyed.next();\r\n    if (!this.allowAutoComplete) {\r\n      this.autoCompleteObscureName = uuidv4();\r\n    }\r\n    this.internalControl.valueChanges\r\n      .pipe(takeUntil(this._destroyed))\r\n      .pipe(auditTime(100))\r\n      .subscribe(() => {\r\n        this._value = this.internalControl.value;\r\n        this.onChange(this._value);\r\n        this.onTouched();\r\n        // console.log('form-base-class: valueChanges', {val: this._value});\r\n      });\r\n\r\n    if (!this.placeholder) {\r\n      const nameParsed = ConvertToTitleCase(this.formControlName + '');\r\n      this.placeholder = nameParsed;\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this._destroyed.next();\r\n  }\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  set value(val) {\r\n    this._value = val;\r\n    this.internalControl.setValue(val);\r\n  }\r\n\r\n  writeValue(value: any): void {\r\n    this.value = value;\r\n  }\r\n\r\n  propagateOnChange: any = () => {};\r\n  registerOnChange(fn: any): void {\r\n    this.propagateOnChange = fn;\r\n  }\r\n\r\n  onTouched: any = () => {};\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    setTimeout(() => {\r\n      if (isDisabled) {\r\n        this.internalControl.disable();\r\n      } else {\r\n        this.internalControl.enable();\r\n      }\r\n    });\r\n  }\r\n\r\n  public validate(c: FormControl) {\r\n    const errors = c.errors;\r\n    const value = c.value;\r\n    // console.log('form-base-class: validate()', { errors, value });\r\n    this.internalControl.setValidators(c.validator);\r\n    return !this.validationError\r\n      ? null\r\n      : {\r\n          validationError: {\r\n            valid: false\r\n          }\r\n        };\r\n  }\r\n\r\n  private onChange(inputValue) {\r\n    this.validationError = this.CheckValueIsValid();\r\n    if (this.validationError) {\r\n      this.propagateOnChange(this.value);\r\n    } else {\r\n      this.propagateOnChange(inputValue);\r\n    }\r\n  }\r\n\r\n  CheckValueIsValid(): string {\r\n    return null;\r\n  }\r\n}\r\n","export function ConvertToTitleCase(input: string): string {\r\n  const capitalsWithSpaces = input.replace(/([A-Z])/g, ' $1').trim();\r\n  const underscoresToSpaces = capitalsWithSpaces.replace(/_/g, ' ');\r\n  return underscoresToSpaces\r\n    .split(' ')\r\n    .map(p => p.charAt(0).toUpperCase() + p.substr(1).toLowerCase())\r\n    .join(' ');\r\n}\r\n","import { Component, forwardRef, Input, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-color',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width m-top\">\r\n      <span [class.txt-grey]=\"disabled\">\r\n        {{ placeholder }}\r\n      </span>\r\n      <input\r\n        matInput\r\n        [hidden]=\"true\"\r\n        [formControl]=\"internalControl\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      />\r\n      <mat-card\r\n        *ngIf=\"!disabled\"\r\n        [cpOutputFormat]=\"'hex'\"\r\n        class=\"box has-pointer\"\r\n        [style.background]=\"value\"\r\n        [(colorPicker)]=\"value\"\r\n        [cpPosition]=\"'top'\"\r\n      >\r\n        <div class=\"flex-space-between\">\r\n          <span>\r\n            {{ value ? value : 'click to pick color' }}\r\n          </span>\r\n          <button\r\n            mat-mini-fab\r\n            (click)=\"onClickClear($event)\"\r\n            [disabled]=\"disabled\"\r\n            matTooltip=\"Clear current color\"\r\n            class=\"bg-white close-btn\"\r\n          >\r\n            <mat-icon class=\"txt-black\">\r\n              clear\r\n            </mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-card>\r\n      <mat-card\r\n        *ngIf=\"disabled\"\r\n        class=\"box\"\r\n        [style.background]=\"value\"\r\n      >\r\n        <div class=\"flex-space-between\">\r\n          <span>\r\n            {{ value ? value : 'click to pick color' }}\r\n          </span>\r\n          <span>\r\n          </span>\r\n        </div>\r\n      </mat-card>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .close-btn {\r\n        position: absolute;\r\n        right: -4px;\r\n        top: -4px;\r\n        transform: scale(0.6);\r\n      }\r\n      .m-top {\r\n        margin-top: -20px;\r\n      }\r\n      .bg-white {\r\n        background-color: white !important;\r\n      }\r\n      .txt-black {\r\n        color: black;\r\n      }\r\n      .txt-grey {\r\n        color: grey;\r\n      }\r\n      .full-width {\r\n        width: 100%;\r\n      }\r\n      .box {\r\n        max-width: 200px;\r\n      }\r\n      .has-pointer {\r\n        cursor: pointer;\r\n      }\r\n      .flex-space-between {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormColorComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormColorComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormColorComponent extends FormBase<string> implements OnInit {\r\n  @Input()\r\n  defaultColor = '#42d742';\r\n\r\n  ngOnInit() {\r\n    if (!this.value) {\r\n      setTimeout(() => {\r\n        this.value = this.defaultColor;\r\n      });\r\n    }\r\n  }\r\n\r\n  onClickClear(e: Event) {\r\n    e.stopPropagation();\r\n    this.value = '';\r\n  }\r\n}\r\n","export class SimpleLog {\n  constructor(private debug: boolean) {}\n\n  public get log() {\n    if (!this.debug) {\n      return (...any) => {};\n    }\n    const boundLogFn: (...any) => void = console.log.bind(\n      console,\n      'mat-reduce:: '\n    );\n    return boundLogFn;\n  }\n\n  public get warn() {\n    if (!this.debug) {\n      return (...any) => {};\n    }\n    const boundLogFn: (...any) => void = console.warn.bind(\n      console,\n      'mat-reduce:: '\n    );\n    return boundLogFn;\n  }\n}\n","import { Component, forwardRef, Input, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\nimport { SimpleLog } from '../../utils/logger';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-date',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <input\r\n        matInput\r\n        (focus)=\"picker.open()\"\r\n        [min]=\"minDate\"\r\n        [matDatepicker]=\"picker\"\r\n        [disabled]=\"disabled\"\r\n        [placeholder]=\"placeholder\"\r\n        [(ngModel)]=\"value\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      />\r\n      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n      <mat-datepicker #picker></mat-datepicker>\r\n    </mat-form-field>\r\n  `,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormDateComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormDateComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormDateComponent extends FormBase<Date> implements OnInit {\r\n  @Input()\r\n  placeholder = '';\r\n  @Input()\r\n  isAfterToday: boolean;\r\n  @Input()\r\n  AfterDate: Date;\r\n\r\n  logger: SimpleLog;\r\n\r\n  ngOnInit() {\r\n    this.logger = new SimpleLog(this.debug);\r\n  }\r\n\r\n  get minDate() {\r\n    if (this.AfterDate) {\r\n      return this.AfterDate;\r\n    }\r\n    if (this.isAfterToday) {\r\n      return new Date();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  CheckValueIsValid(): string {\r\n    const formValue = this.value;\r\n    let formDate = formValue;\r\n    if (typeof formValue === 'string' || !formValue) {\r\n      formDate = new Date(formValue);\r\n    }\r\n    this.logger.log('form-date: CheckValueIsValid()', {\r\n      formValue,\r\n      formDate,\r\n      isAfterToday: this.isAfterToday,\r\n      isAfterDate: this.AfterDate\r\n    });\r\n    if (this.isAfterToday) {\r\n      const todaysDate = new Date();\r\n      const isAfterToday = this.isNewDateAfterThis(formDate, todaysDate);\r\n      if (!isAfterToday) {\r\n        return 'Date must be after today\\'s date';\r\n      }\r\n    }\r\n    if (this.AfterDate) {\r\n      const isAfterDate = this.isNewDateAfterThis(formDate, this.AfterDate);\r\n      if (!isAfterDate) {\r\n        return 'Date must be after date: ' + this.AfterDate.toDateString();\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private isNewDateAfterThis(formDate: Date, afterDate: Date) {\r\n    this.logger.log('form-date: isNewDateAfterThis()', {\r\n      formDate,\r\n      afterDate\r\n    });\r\n    if (!formDate || typeof formDate.getTime !== 'function') {\r\n      console.error('the form control value is not a valid Date', { formDate });\r\n      throw new Error();\r\n    }\r\n    if (!afterDate || typeof afterDate.getTime !== 'function') {\r\n      console.error('AfterDate is not a valid Date', { afterDate });\r\n      throw new Error();\r\n    }\r\n    const afterSeconds = afterDate.getTime();\r\n    const formSeconds = formDate.getTime();\r\n    const isAfter = afterSeconds < formSeconds;\r\n    this.logger.log('form-date: isNewDateAfterThis()', {\r\n      afterSeconds,\r\n      formSeconds,\r\n      isAfter\r\n    });\r\n    return isAfter;\r\n  }\r\n}\r\n","import { Component, forwardRef, Input, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-time',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <input\r\n        matInput\r\n        [formControl]=\"internalControl\"\r\n        [ngxTimepicker]=\"picker\"\r\n        [placeholder]=\"placeholder\"\r\n        [format]=\"format\"\r\n        [min]=\"min\"\r\n        [max]=\"max\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"false\"\r\n      />\r\n      <mat-icon\r\n        matSuffix\r\n        class=\"has-pointer\"\r\n        [class.is-grey]=\"disabled\"\r\n        (click)=\"picker.open()\"\r\n      >\r\n        access_time\r\n      </mat-icon>\r\n      <ngx-material-timepicker\r\n        #picker\r\n        [defaultTime]=\"defaultTime\"\r\n        [minutesGap]=\"minutesGap\"\r\n        ESC=\"true\"\r\n      ></ngx-material-timepicker>\r\n    </mat-form-field>\r\n  `,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormTimeComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormTimeComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  styles: [\r\n    `\r\n      .is-grey {\r\n        color: #aaa;\r\n      }\r\n      .has-pointer {\r\n        cursor: pointer;\r\n      }\r\n      .full-width {\r\n        width: 100%;\r\n      }\r\n    `\r\n  ]\r\n})\r\nexport class LibFormTimeComponent extends FormBase<string> implements OnInit {\r\n  @Input()\r\n  placeholder = '';\r\n  @Input()\r\n  format: number; // 12 or 24\r\n  @Input()\r\n  min: string; // 12:00 AM\r\n  @Input()\r\n  max: string; // 12:00 AM\r\n  @Input()\r\n  defaultTime: string; // 12:00 AM\r\n  @Input()\r\n  minutesGap: number; // 1 -> 60\r\n  @Input()\r\n  required: boolean;\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnInit,\r\n  ViewChild,\r\n  forwardRef\r\n} from '@angular/core';\r\nimport { SignaturePad } from 'angular2-signaturepad/signature-pad';\r\nimport { FormBase } from '../form-base-class';\r\n\r\nimport { v1 as uuidv1 } from 'uuid';\r\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'form-signature',\r\n  template: `\r\n    <h3>{{ placeholder }}</h3>\r\n    <div #container class=\"signature-container\">\r\n      <div class=\"signature-border\" [class.disabled-border]=\"disabled\">\r\n        <signature-pad\r\n          #signaturePad\r\n          [hidden]=\"disabled\"\r\n          [options]=\"signaturePadOptions\"\r\n          (onEndEvent)=\"drawComplete(signaturePad)\"\r\n        ></signature-pad>\r\n        <img [hidden]=\"!disabled\" [src]=\"this.value || blankImageSrc\" />\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [\r\n    `\r\n      h3 {\r\n        display: inline-block;\r\n        margin-bottom: 0;\r\n      }\r\n      .signature-container {\r\n        display: inline-block;\r\n        width: 100%;\r\n      }\r\n      .signature-border {\r\n        display: inline-block;\r\n        border: 1px #777 solid;\r\n        margin: 20px;\r\n        height: 200px;\r\n      }\r\n      .disabled-border {\r\n        border: 2px #aaa dotted;\r\n      }\r\n      img {\r\n        height: 100%;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormSignatureComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormSignatureComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormSignatureComponent extends FormBase<string>\r\n  implements OnInit, AfterViewInit {\r\n  @Input()\r\n  placeholder = 'Sign Here';\r\n\r\n  blankImageSrc = 'https://i.imgur.com/4StmpUT.png';\r\n\r\n  signaturePadOptions = {\r\n    minWidth: 2,\r\n    canvasWidth: 400,\r\n    canvasHeight: 200\r\n  };\r\n  @ViewChild('signaturePad', { static: false } as any)\r\n  signaturePad: ElementRef<SignaturePad>;\r\n  @ViewChild('container') container: ElementRef<HTMLDivElement>;\r\n\r\n  ngOnInit() {\r\n    this.autoCompleteObscureName = uuidv1();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.updateWidthToParent();\r\n  }\r\n\r\n  writeValue(value: any): void {\r\n    this.value = value;\r\n    this.setSignatureToPad();\r\n  }\r\n\r\n  updateWidthToParent() {\r\n    const pad = this.signaturePad.nativeElement;\r\n    if (!pad) {\r\n      return;\r\n    }\r\n    const containerWidth = this.container.nativeElement.clientWidth;\r\n    if (containerWidth < 600) {\r\n      const marginLeftAndRight = 20 * 2;\r\n      pad.set(\r\n        'canvasWidth',\r\n        containerWidth - marginLeftAndRight - 10\r\n      );\r\n    }\r\n  }\r\n\r\n  setSignatureToPad() {\r\n    // Set current signature from control\r\n    const currentSignature = this.value;\r\n    if (!this.signaturePad || !currentSignature) {\r\n      return;\r\n    }\r\n    const pad = this.signaturePad.nativeElement;\r\n    pad.fromDataURL(currentSignature);\r\n  }\r\n\r\n  drawComplete(e) {\r\n    if (!e) {\r\n      return;\r\n    }\r\n    const imgData = e.toDataURL();\r\n    this.value = imgData;\r\n  }\r\n}\r\n","import 'quill';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nexport interface QuillCounterConfig {\r\n  container: string;\r\n  units: 'words' | 'chars' | 'kb';\r\n}\r\n\r\nexport interface QuillInstance {\r\n  on: any;\r\n  getText: any;\r\n  root: any;\r\n}\r\n\r\nexport default class Counter {\r\n  quill: QuillInstance;\r\n  options: QuillCounterConfig;\r\n  updateTrigger = new Subject();\r\n\r\n  constructor(quill, options) {\r\n    this.quill = quill;\r\n    this.options = options;\r\n\r\n    const container = document.querySelector(this.options.container);\r\n\r\n    this.quill.on('text-change', () => {\r\n      this.updateTrigger.next();\r\n    });\r\n\r\n    this.updateTrigger.pipe(debounceTime(2000)).subscribe(() => {\r\n      const length = this.calculate();\r\n      container.innerHTML = length + ' ' + this.options.units;\r\n      // console.log('form-html-editor: updating counter =' + container.innerHTML);\r\n    });\r\n  }\r\n\r\n  calculate() {\r\n    const text = this.quill.getText().trim();\r\n\r\n    if (this.options.units === 'words') {\r\n      return !text ? 0 : text.split(/\\s+/).length;\r\n    }\r\n    if (this.options.units === 'kb') {\r\n      const html = this.quill.root.innerHTML;\r\n      return Math.round(html.length / 1024);\r\n    }\r\n    return text.length;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime, takeUntil, distinctUntilChanged } from 'rxjs/operators';\r\n\r\nimport * as QuillNamespace from 'quill';\r\nconst Quill: any = QuillNamespace;\r\nimport Counter, { QuillCounterConfig } from './editor-modules/counter';\r\n\r\nimport { ImageDrop } from 'quill-image-drop-module';\r\nimport ImageCompress from 'quill-image-compress';\r\nimport ImageResize from 'quill-image-resize-module';\r\nimport { htmlEditButton } from 'quill-html-edit-button';\r\nimport { AddQuillInlineStyles } from './editor-modules/add-quill-inline-styles';\r\nimport { SimpleLog } from '../../utils/logger';\r\n\r\nAddQuillInlineStyles(Quill);\r\n\r\nQuill.register('modules/htmlEditButton', htmlEditButton);\r\nQuill.register('modules/counter', Counter);\r\nQuill.register('modules/counterChars', Counter);\r\nQuill.register('modules/counterKiloBytes', Counter);\r\nQuill.register('modules/imageDrop', ImageDrop);\r\nQuill.register('modules/imageCompress', ImageCompress);\r\nQuill.register('modules/imageResize', ImageResize);\r\n\r\ntype conf = QuillCounterConfig;\r\n\r\n@Component({\r\n  selector: 'form-quill-editor',\r\n  template: `\r\n    <div [class.editor-disabled]=\"disabled\">\r\n      <quill-editor\r\n        (onContentChanged)=\"onContentChanged.next($event)\"\r\n        [ngModel]=\"value\"\r\n        [modules]=\"quillModulesUsed\"\r\n        [disabled]=\"disabled\"\r\n        [placeholder]=\"placeholder\"\r\n      >\r\n        <div quill-editor-toolbar>\r\n          <span class=\"ql-formats\">\r\n            <select class=\"ql-font\">\r\n              <option selected></option>\r\n              <option value=\"serif\"></option>\r\n              <option value=\"monospace\"></option>\r\n            </select>\r\n            <select class=\"ql-header\">\r\n              <option value=\"1\"></option>\r\n              <option value=\"2\"></option>\r\n              <option value=\"3\"></option>\r\n              <option value=\"4\"></option>\r\n              <option value=\"5\"></option>\r\n              <option value=\"6\"></option>\r\n              <option selected></option>\r\n            </select>\r\n          </span>\r\n          <span class=\"ql-formats\">\r\n            <button class=\"ql-bold\"></button>\r\n            <button class=\"ql-italic\"></button>\r\n            <button class=\"ql-underline\"></button>\r\n            <button class=\"ql-strike\"></button>\r\n          </span>\r\n          <span class=\"ql-formats\">\r\n            <select class=\"ql-color\"></select>\r\n            <select class=\"ql-background\"></select>\r\n          </span>\r\n          <span class=\"ql-formats\">\r\n            <button class=\"ql-list\" value=\"ordered\"></button>\r\n            <button class=\"ql-list\" value=\"bullet\"></button>\r\n            <select class=\"ql-align\">\r\n              <option selected></option>\r\n              <option value=\"center\"></option>\r\n              <option value=\"right\"></option>\r\n              <option value=\"justify\"></option>\r\n            </select>\r\n          </span>\r\n          <span class=\"ql-formats\">\r\n            <button class=\"ql-link\"></button>\r\n            <button class=\"ql-image\"></button>\r\n          </span>\r\n          <span class=\"ql-formats font12px\">\r\n            <div id=\"counter\"></div>\r\n          </span>\r\n          <span class=\"ql-formats font12px\">\r\n            <div id=\"counterChars\"></div>\r\n          </span>\r\n          <span class=\"ql-formats font12px\">\r\n            <div id=\"counterKiloBytes\"></div>\r\n          </span>\r\n        </div>\r\n      </quill-editor>\r\n    </div>\r\n  `,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormQuillEditorComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormQuillEditorComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  styles: [\r\n    `\r\n      .font12px {\r\n        font-size: 12px;\r\n      }\r\n      .editor-disabled {\r\n        filter: contrast(0.4) brightness(1.5);\r\n      }\r\n      .ql-editor {\r\n        white-space: normal !important;\r\n      }\r\n    `\r\n  ],\r\n  styleUrls: ['./quill-css/quill.snow.css', './quill-css/quill.bubble.css'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class LibFormQuillEditorComponent extends FormBase<string>\r\n  implements OnDestroy, OnInit {\r\n  @Input()\r\n  quillModules: any = {};\r\n  @Input()\r\n  maxImageWidth = 2000;\r\n  @Input()\r\n  placeholder = 'Input content here...';\r\n\r\n  quillModulesUsed: any = {};\r\n\r\n  onContentChanged = new Subject();\r\n  destroyed = new Subject();\r\n\r\n  logger: SimpleLog;\r\n\r\n  ngOnInit() {\r\n    this.logger = new SimpleLog(this.debug);\r\n    const quillModulesDefaults = {\r\n      toolbar: '#toolbar',\r\n      counter: { container: '#counter', units: 'words' } as conf,\r\n      counterChars: { container: '#counterChars', units: 'chars' } as conf,\r\n      counterKiloBytes: { container: '#counterKiloBytes', units: 'kb' } as conf,\r\n      imageDrop: true,\r\n      imageCompress: {\r\n        quality: 0.7,\r\n        maxWidth: 1200\r\n      },\r\n      clipboard: {\r\n        matchVisual: false\r\n      },\r\n      imageResize: true\r\n    };\r\n    this.quillModulesUsed = {\r\n      ...quillModulesDefaults,\r\n      ...this.quillModules\r\n    };\r\n\r\n    this.onContentChanged\r\n      .pipe(\r\n        debounceTime(1000),\r\n        takeUntil(this.destroyed),\r\n        distinctUntilChanged()\r\n      )\r\n      .subscribe((event: any) => {\r\n        const htmlValue = event.html || '<p></p>';\r\n        this.logger.log('LibFormQuillEditorComponent:', { htmlValue, event });\r\n        this.writeValue(htmlValue);\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyed.next();\r\n  }\r\n}\r\n","export function AddQuillInlineStyles(Quill: any) {\r\n  // configure Quill to use inline styles so the email's format properly\r\n  const DirectionAttribute = Quill.import('attributors/attribute/direction');\r\n  Quill.register(DirectionAttribute, true);\r\n\r\n  const AlignClass = Quill.import('attributors/class/align');\r\n  Quill.register(AlignClass, true);\r\n\r\n  const BackgroundClass = Quill.import('attributors/class/background');\r\n  Quill.register(BackgroundClass, true);\r\n\r\n  const ColorClass = Quill.import('attributors/class/color');\r\n  Quill.register(ColorClass, true);\r\n\r\n  const DirectionClass = Quill.import('attributors/class/direction');\r\n  Quill.register(DirectionClass, true);\r\n\r\n  const FontClass = Quill.import('attributors/class/font');\r\n  Quill.register(FontClass, true);\r\n\r\n  const SizeClass = Quill.import('attributors/class/size');\r\n  Quill.register(SizeClass, true);\r\n\r\n  const AlignStyle = Quill.import('attributors/style/align');\r\n  Quill.register(AlignStyle, true);\r\n\r\n  const BackgroundStyle = Quill.import('attributors/style/background');\r\n  Quill.register(BackgroundStyle, true);\r\n\r\n  const ColorStyle = Quill.import('attributors/style/color');\r\n  Quill.register(ColorStyle, true);\r\n\r\n  const DirectionStyle = Quill.import('attributors/style/direction');\r\n  Quill.register(DirectionStyle, true);\r\n\r\n  const FontStyle = Quill.import('attributors/style/font');\r\n  Quill.register(FontStyle, true);\r\n\r\n  const SizeStyle = Quill.import('attributors/style/size');\r\n  Quill.register(SizeStyle, true);\r\n  // create new Quill instance after...\r\n\r\n  const BaseImageFormat = Quill.import('formats/image');\r\n  const ImageFormatAttributesList = ['alt', 'height', 'width', 'style'];\r\n\r\n  class ImageFormat extends BaseImageFormat {\r\n    static formats(domNode) {\r\n      return ImageFormatAttributesList.reduce((formats, attribute) => {\r\n        if (domNode.hasAttribute(attribute)) {\r\n          formats[attribute] = domNode.getAttribute(attribute);\r\n        }\r\n        return formats;\r\n      }, {});\r\n    }\r\n    format(name, value) {\r\n      if (ImageFormatAttributesList.indexOf(name) > -1) {\r\n        if (value) {\r\n          this.domNode.setAttribute(name, value);\r\n        } else {\r\n          this.domNode.removeAttribute(name);\r\n        }\r\n      } else {\r\n        super.format(name, value);\r\n      }\r\n    }\r\n  }\r\n\r\n  Quill.register(ImageFormat, true);\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport {\r\n  MatDatetimepickerModule,\r\n  MatNativeDatetimeModule\r\n} from '@mat-datetimepicker/core';\r\nimport { ColorPickerModule } from 'ngx-color-picker';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatInputModule,\r\n  MatCardModule,\r\n  MatIconModule,\r\n  MatDatepickerModule,\r\n  MatButtonModule\r\n} from '@angular/material';\r\nimport { NgxMaterialTimepickerModule } from 'ngx-material-timepicker';\r\nimport { QuillModule } from 'ngx-quill';\r\n\r\nimport { LibFormColorComponent } from './form-color.component';\r\nimport { LibFormDateComponent } from './form-date.component';\r\nimport { LibFormTimeComponent } from './form-time.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SignaturePadModule } from 'angular2-signaturepad';\r\nimport { LibFormSignatureComponent } from './form-signature.component';\r\nimport { LibFormQuillEditorComponent } from './form-quill-editor.component';\r\n\r\nconst exportedModules = [\r\n  CommonModule,\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n  MatInputModule,\r\n  MatCardModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatDatepickerModule,\r\n  MatNativeDatetimeModule,\r\n  MatDatetimepickerModule\r\n];\r\n\r\nconst exported = [\r\n  LibFormColorComponent,\r\n  LibFormDateComponent,\r\n  LibFormTimeComponent,\r\n  LibFormSignatureComponent,\r\n  LibFormQuillEditorComponent\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    ...exportedModules,\r\n    CommonModule,\r\n    SignaturePadModule,\r\n    ColorPickerModule,\r\n    QuillModule,\r\n    NgxMaterialTimepickerModule\r\n  ],\r\n  exports: [...exported, ...exportedModules],\r\n  declarations: [...exported],\r\n  providers: []\r\n})\r\nexport class MatReduceFormsUsing3rdPartyModule {}\r\n","import { Component, forwardRef, Input, OnInit, OnDestroy } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\nfunction compareObject(l1: {}, l2: {}) {\r\n  if (!l1 || !l2) {\r\n    return false;\r\n  }\r\n  let json1, json2;\r\n  try {\r\n    json1 = JSON.stringify(l1);\r\n    json2 = JSON.stringify(l2);\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n  if (json1 !== json2) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-select-object-multiple',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <mat-select\r\n        [formControl]=\"this.internalControl\"\r\n        [placeholder]=\"placeholder\"\r\n        [compareWith]=\"compareObject\"\r\n        multiple\r\n      >\r\n        <mat-select-trigger>\r\n          <div *ngIf=\"this.internalControl.value as selected\">\r\n            {{ selected?.length ? selected[0][selectionKey] : '' }}\r\n            <span\r\n              *ngIf=\"this.internalControl.value?.length > 1\"\r\n              class=\"example-additional-selection\"\r\n            >\r\n              (+{{ selected.length - 1 }}\r\n              {{ selected?.length === 2 ? 'other' : 'others' }})\r\n            </span>\r\n          </div>\r\n        </mat-select-trigger>\r\n        <mat-option\r\n          *ngFor=\"let selectionObject of selectionObjects\"\r\n          [value]=\"selectionObject\"\r\n        >\r\n          {{ selectionObject[selectionKey] }}\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n        padding-bottom: 15px;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormSelectObjectMultipleComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormSelectObjectMultipleComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormSelectObjectMultipleComponent extends FormBase<Object> {\r\n  @Input()\r\n  selectionObjects: Object[];\r\n  @Input()\r\n  selectionKey: string;\r\n\r\n  compareObject = compareObject;\r\n}\r\n","import { Component, forwardRef, Input } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-toggle',\r\n  template: `\r\n    <div class=\"full-width\">\r\n      <mat-slide-toggle\r\n        [formControl]=\"internalControl\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      >\r\n        {{ placeholder }} ({{ value ? yes : no }})\r\n      </mat-slide-toggle>\r\n    </div>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n        padding-bottom: 15px;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormToggleComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormToggleComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormToggleComponent extends FormBase<string> {\r\n  @Input()\r\n  yes = 'Yes';\r\n  @Input()\r\n  no = 'No';\r\n}\r\n","import { Component, forwardRef, Input } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-text-clearable',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <input\r\n        *ngIf=\"!disabled && !locked\"\r\n        matInput\r\n        [placeholder]=\"placeholder\"\r\n        [formControl]=\"internalControl\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        [maxlength]=\"maxlength\"\r\n        autocomplete=\"dontcompleteme\"\r\n      />\r\n      <input\r\n        *ngIf=\"disabled || locked\"\r\n        matInput\r\n        [disabled]=\"true\"\r\n        [value]=\"value\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      />\r\n      <mat-icon\r\n        matSuffix\r\n        class=\"has-pointer\"\r\n        *ngIf=\"!disabled\"\r\n        (click)=\"onClickEditLock()\"\r\n      >\r\n        {{ locked ? 'edit' : 'locked' }}\r\n      </mat-icon>\r\n      <mat-icon matSuffix *ngIf=\"disabled\" class=\"is-grey\">\r\n        edit\r\n      </mat-icon>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .is-grey {\r\n        color: grey;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormTextClearableComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormTextClearableComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormTextClearableComponent extends FormBase<string> {\r\n\r\n  @Input()\r\n  locked = true;\r\n  @Input()\r\n  maxlength: number;\r\n\r\n  onClickEditLock() {\r\n    this.locked = !this.locked;\r\n    const isEditabled = !this.locked && !this.disabled;\r\n    if (isEditabled) {\r\n      this.internalControl.enable();\r\n    } else {\r\n      this.internalControl.disable();\r\n    }\r\n  }\r\n}\r\n","import { Component, forwardRef, OnInit, OnDestroy } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\nimport {\r\n  FormControlTypeSafe,\r\n  FormBuilderTypedService\r\n} from '../../services/form-builder-typed.service';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-text-disabled',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <input\r\n        matInput\r\n        [placeholder]=\"placeholder\"\r\n        [formControl]=\"disabledControl\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      />\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormTextDisabledComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormTextDisabledComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormTextDisabledComponent extends FormBase<string>\r\n  implements OnInit {\r\n  disabledControl: FormControlTypeSafe<string>;\r\n\r\n  constructor(private fb: FormBuilderTypedService) {\r\n    super();\r\n    this.disabledControl = this.fb.control<string>({\r\n      value: '',\r\n      disabled: true\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.disabledControl.setValue(this.internalControl.value);\r\n    this.internalControl.valueChanges\r\n      .pipe(takeUntil(this._destroyed))\r\n      .subscribe(() => {\r\n        this.disabledControl.setValue(this.internalControl.value);\r\n      });\r\n  }\r\n}\r\n","import { Component, forwardRef, Input } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-text-icons',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <mat-icon matPrefix class=\"has-pointer\" *ngIf=\"prefixIcon\">\r\n        {{ prefixIcon }}\r\n      </mat-icon>\r\n      <input\r\n        matInput\r\n        [formControl]=\"internalControl\"\r\n        [maxlength]=\"maxlength\"\r\n        [placeholder]=\"placeholder\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      />\r\n      <mat-icon\r\n        matSuffix\r\n        class=\"has-pointer\"\r\n        *ngIf=\"!disabled && clearable\"\r\n        (click)=\"onClickClear()\"\r\n      >\r\n        clear\r\n      </mat-icon>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .is-grey {\r\n        color: grey;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormTextIconsComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormTextIconsComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormTextIconsComponent extends FormBase<string> {\r\n  @Input()\r\n  maxlength: number;\r\n  @Input()\r\n  clearable = true;\r\n  @Input()\r\n  prefixIcon = 'search';\r\n\r\n  onClickClear() {\r\n    this.internalControl.reset();\r\n  }\r\n}\r\n","import { Component, forwardRef, Input, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-text-password',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <input\r\n        matInput\r\n        [placeholder]=\"placeholder\"\r\n        [maxlength]=\"maxlength\"\r\n        [formControl]=\"internalControl\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n        [type]=\"inputType\"\r\n      />\r\n      <mat-icon matSuffix (click)=\"toggleHide()\">{{\r\n        hidePassword ? 'visibility_off' : 'visibility'\r\n      }}</mat-icon>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormTextPasswordComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormTextPasswordComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormTextPasswordComponent extends FormBase<string>\r\n  implements OnInit {\r\n  @Input()\r\n  maxlength: number;\r\n\r\n  get inputType() {\r\n    return this.hidePassword ? 'password' : 'text';\r\n  }\r\n\r\n  hidePassword = true;\r\n\r\n  toggleHide() {\r\n    this.hidePassword = !this.hidePassword;\r\n  }\r\n}\r\n","import { Component, forwardRef, Input, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-text',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <input\r\n        matInput\r\n        [placeholder]=\"placeholder\"\r\n        [maxlength]=\"maxlength\"\r\n        [formControl]=\"internalControl\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      />\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormTextComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormTextComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormTextComponent extends FormBase<string> implements OnInit {\r\n  @Input()\r\n  maxlength: number;\r\n}\r\n","import { Component, forwardRef, Input, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\nimport {\r\n  FormControlTypeSafe,\r\n  FormBuilderTypedService\r\n} from '../../services/form-builder-typed.service';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-textarea-disabled',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <textarea\r\n        matInput\r\n        [rows]=\"rows\"\r\n        [placeholder]=\"placeholder\"\r\n        [formControl]=\"disabledControl\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      ></textarea>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormTextAreaDisabledComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormTextAreaDisabledComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormTextAreaDisabledComponent extends FormBase<string>\r\n  implements OnInit {\r\n  @Input()\r\n  rows = 4;\r\n\r\n  disabledControl: FormControlTypeSafe<string>;\r\n\r\n  constructor(private fb: FormBuilderTypedService) {\r\n    super();\r\n    this.disabledControl = this.fb.control<string>({\r\n      value: '',\r\n      disabled: true\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.disabledControl.setValue(this.internalControl.value);\r\n    this.internalControl.valueChanges\r\n      .pipe(takeUntil(this._destroyed))\r\n      .subscribe(() => {\r\n        this.disabledControl.setValue(this.internalControl.value);\r\n      });\r\n  }\r\n}\r\n","import { Component, forwardRef, Input } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-textarea',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <textarea\r\n        matInput\r\n        [rows]=\"rows\"\r\n        [placeholder]=\"placeholder\"\r\n        [maxlength]=\"maxlength\"\r\n        [formControl]=\"internalControl\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      ></textarea>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormTextAreaComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormTextAreaComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormTextAreaComponent extends FormBase<string> {\r\n  @Input()\r\n  rows = 4;\r\n  @Input()\r\n  maxlength: number;\r\n}\r\n","import { Component, forwardRef, Input, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, FormControl } from '@angular/forms';\r\nimport { takeUntil, debounceTime, tap, delay } from 'rxjs/operators';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-toggle-reversed',\r\n  template: `\r\n    <div class=\"full-width\">\r\n      <mat-slide-toggle\r\n        [formControl]=\"reversedControl\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      >\r\n        <div class=\"flex-center\">\r\n          <ng-content></ng-content>\r\n          <span>{{ placeholder }}</span>\r\n          <span>({{ value ? yes : no }})</span>\r\n        </div>\r\n      </mat-slide-toggle>\r\n    </div>\r\n  `,\r\n  styles: [\r\n    `\r\n      span {\r\n        margin: 2px;\r\n      }\r\n      .full-width {\r\n        width: 100%;\r\n        padding-bottom: 15px;\r\n      }\r\n      .flex-center {\r\n        display: flex;\r\n        align-items: center;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormToggleReversedComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormToggleReversedComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormToggleReversedComponent extends FormBase<boolean>\r\n  implements OnInit {\r\n  @Input()\r\n  yes = 'Yes';\r\n  @Input()\r\n  no = 'No';\r\n\r\n  reversedControl = new FormControl();\r\n\r\n  private lockControl: boolean;\r\n\r\n  ngOnInit() {\r\n    this.reversedControl.valueChanges\r\n      .pipe(\r\n        takeUntil(this._destroyed),\r\n        debounceTime(100)\r\n      )\r\n      .subscribe(value => {\r\n        if (this.lockControl) {\r\n          return;\r\n        }\r\n        this.value = !value;\r\n        // console.log('reversedControl.valueChanges', { thisValue: this.value });\r\n      });\r\n\r\n    this.internalControl.valueChanges\r\n      .pipe(\r\n        takeUntil(this._destroyed),\r\n        debounceTime(100),\r\n        tap(() => (this.lockControl = true)),\r\n        delay(100),\r\n        tap(value => this.reversedControl.setValue(!value)),\r\n        delay(100),\r\n        tap(() => (this.lockControl = false))\r\n      )\r\n      .subscribe(() => {\r\n        // console.log('reversedControl.valueChanges', { thisValue: this.value });\r\n      });\r\n\r\n    this.internalControl.statusChanges\r\n      .pipe(takeUntil(this._destroyed))\r\n      .subscribe(() => {\r\n        if (this.disabled) {\r\n          this.reversedControl.disable();\r\n        } else {\r\n          this.reversedControl.enable();\r\n        }\r\n      });\r\n  }\r\n}\r\n","import { Component, forwardRef, Input, OnInit, OnDestroy } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\nfunction compareObject(l1: {}, l2: {}) {\r\n  if (!l1 || !l2) {\r\n    return false;\r\n  }\r\n  let json1, json2;\r\n  try {\r\n    json1 = JSON.stringify(l1);\r\n    json2 = JSON.stringify(l2);\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n  if (json1 !== json2) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-select-object',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <mat-select\r\n        [formControl]=\"this.internalControl\"\r\n        [placeholder]=\"placeholder\"\r\n        [compareWith]=\"compareObject\"\r\n      >\r\n        <mat-option\r\n          *ngFor=\"let selectionObject of selectionObjects\"\r\n          [value]=\"selectionObject\"\r\n        >\r\n          {{ selectionObject[selectionKey] }}\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n        padding-bottom: 15px;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormSelectObjectComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormSelectObjectComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormSelectObjectComponent extends FormBase<Object> {\r\n  @Input()\r\n  selectionObjects: Object[];\r\n  @Input()\r\n  selectionKey: string;\r\n\r\n  compareObject = compareObject;\r\n\r\n  writeValue(newVal: Object) {\r\n    this.value = newVal || {};\r\n  }\r\n}\r\n","import { Component, forwardRef, Input, OnInit, OnDestroy } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-select-string',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <mat-select\r\n        [formControl]=\"this.internalControl\"\r\n        [placeholder]=\"placeholder\"\r\n      >\r\n        <mat-option *ngFor=\"let selection of selections\" [value]=\"selection\">\r\n          {{ selection }}\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n        padding-bottom: 15px;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormSelectStringComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormSelectStringComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormSelectStringComponent extends FormBase<string> {\r\n  @Input()\r\n  selections: string[];\r\n}\r\n","// tslint:disable: variable-name\r\nimport {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n  ElementRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {\r\n  MatAutocomplete,\r\n  MatAutocompleteSelectedEvent,\r\n  MatChipInputEvent,\r\n  MatSnackBar,\r\n  MatAutocompleteTrigger\r\n} from '@angular/material';\r\nimport { FormControl, NG_VALIDATORS, NG_VALUE_ACCESSOR, AbstractControl } from '@angular/forms';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { FormBase } from '../form-base-class';\r\nimport { Tag } from './Tag';\r\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\r\n\r\nimport { v1 as uuidv1 } from 'uuid';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-tag-multiple',\r\n  template: `\r\n    <mat-form-field\r\n      [appearance]=\"appearance\"\r\n      class=\"tag-full-width\"\r\n      [class.form-tag-control-invalid]=\"hasRed()\"\r\n    >\r\n      <mat-chip-list #chipList [disabled]=\"disabled\">\r\n        <mat-chip\r\n          *ngFor=\"let tag of selectedTags\"\r\n          [selectable]=\"selectable\"\r\n          [disabled]=\"this.internalControl.disabled\"\r\n          [removable]=\"removable\"\r\n          (removed)=\"removeTagChip(tag)\"\r\n        >\r\n          {{ tag.name }}\r\n          <mat-icon\r\n            matChipRemove\r\n            *ngIf=\"removable && this.internalControl.enabled\"\r\n            >cancel</mat-icon\r\n          >\r\n        </mat-chip>\r\n        <input\r\n          [placeholder]=\"placeholder\"\r\n          #textInput\r\n          [name]=\"autoCompleteObscureName\"\r\n          autocomplete=\"dontcompleteme\"\r\n          [formControl]=\"inputTextControl\"\r\n          [matAutocomplete]=\"auto\"\r\n          [matChipInputFor]=\"chipList\"\r\n          [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n          [matChipInputAddOnBlur]=\"addOnBlur\"\r\n          (matChipInputTokenEnd)=\"addFromTextInput($event)\"\r\n          (keydown)=\"focusOnEnter($event)\"\r\n          (blur)=\"onBlur()\"\r\n        />\r\n        <mat-icon\r\n          class=\"tag-icon\"\r\n          matTooltip=\"Add tags here...\"\r\n          matBadge=\"â\"\r\n          matSuffix\r\n          >local_offer</mat-icon\r\n        >\r\n      </mat-chip-list>\r\n      <mat-autocomplete\r\n        #auto=\"matAutocomplete\"\r\n        (optionSelected)=\"optionSelectedFromList($event)\"\r\n      >\r\n        <mat-option\r\n          *ngFor=\"let choiceName of filteredTagNames$ | async\"\r\n          [value]=\"choiceName\"\r\n        >\r\n          {{ choiceName }}\r\n        </mat-option>\r\n      </mat-autocomplete>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .tag-full-width {\r\n        width: 100%;\r\n      }\r\n      .tag-icon {\r\n        color: grey;\r\n        right: 15px;\r\n      }\r\n      .tag-icon .mat-badge-content {\r\n        background-color: #afc5b000 !important;\r\n        right: 1px !important;\r\n        top: 3px !important;\r\n        color: white !important;\r\n      }\r\n      .form-tag-control-invalid .mat-form-field-label {\r\n        color: #ff4f4f !important;\r\n      }\r\n    `\r\n  ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormTagMultipleComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormTagMultipleComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormTagMultipleComponent extends FormBase<Tag[]>\r\n  implements OnInit, OnDestroy {\r\n  // EXTERNAL API\r\n  private _choices: Tag[] = [];\r\n  @Input()\r\n  set choices(newChoices) {\r\n    if (!newChoices) {\r\n      newChoices = [];\r\n    }\r\n    this._choices = newChoices;\r\n    this.inputTextControl.patchValue(this.inputTextControl.value);\r\n  }\r\n  get choices() {\r\n    return this._choices;\r\n  }\r\n  @Input() customValues: boolean;\r\n  @Input() removable = true;\r\n  @Input() filterStrategy: 'all' | 'beginning' = 'all';\r\n  @Output() addedNewTag = new EventEmitter<Tag>();\r\n\r\n  // INTERNAL\r\n\r\n  get selectedTags() {\r\n    return this.value;\r\n  }\r\n  get choicesStrings(): string[] {\r\n    return this.choices.map(t => (!!t ? t.name : ''));\r\n  }\r\n  visible = true;\r\n  selectable = true;\r\n  addOnBlur = true;\r\n  separatorKeysCodes: number[] = [ENTER, COMMA];\r\n  inputTextControl = new FormControl();\r\n  filteredTagNames$: Observable<string[]>;\r\n\r\n  @ViewChild('textInput', {} as any) textInput: ElementRef<HTMLInputElement>;\r\n  @ViewChild('textInput', { read: MatAutocompleteTrigger } as any)\r\n  matAutocompleteTrigger: MatAutocompleteTrigger;\r\n  @ViewChild('auto', {} as any)\r\n  matAutocomplete: MatAutocomplete;\r\n\r\n  destroyed = new Subject<void>();\r\n\r\n  constructor(private snack: MatSnackBar) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.filteredTagNames$ = this.inputTextControl.valueChanges.pipe(\r\n      startWith(null),\r\n      map((tagName: string | null) =>\r\n        tagName ? this._filter(tagName) : this.getChoicesMinusSelected()\r\n      )\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyed.next();\r\n  }\r\n\r\n  writeValue(newVal: Tag[]) {\r\n    this.value = newVal || [];\r\n  }\r\n\r\n  private getChoicesMinusSelected(): string[] {\r\n    const alreadySelectedSet = new Set(this.selectedTags.map(t => t.name));\r\n    return this.choicesStrings.filter(\r\n      choice => !alreadySelectedSet.has(choice)\r\n    );\r\n  }\r\n\r\n  private _filter(value: string): string[] {\r\n    const choices = this.getChoicesMinusSelected();\r\n    if (this.filterStrategy === 'all') {\r\n      return _filterAll();\r\n    } else {\r\n      return _filterBeginning();\r\n    }\r\n    function _filterAll(): string[] {\r\n      const filterValue = value.toLowerCase();\r\n      return choices.filter(choice =>\r\n        (choice + '').toLowerCase().includes(filterValue)\r\n      );\r\n    }\r\n    function _filterBeginning(): string[] {\r\n      const filterValue = value.toLowerCase();\r\n      return choices.filter(\r\n        choice => (choice + '').toLowerCase().indexOf(filterValue) === 0\r\n      );\r\n    }\r\n  }\r\n\r\n  onBlur() {\r\n    this.CheckValueIsValid();\r\n  }\r\n\r\n  removeTagChip(tagToRemove: Tag) {\r\n    this.log('removeTagChip', { tagToRemove });\r\n    this.matAutocompleteTrigger.closePanel();\r\n    this.value = this.value.filter(t => t.id !== tagToRemove.id);\r\n    this.inputTextControl.setValue(null);\r\n    this.inputTextControl.markAsTouched();\r\n  }\r\n\r\n  async addFromTextInput(event: MatChipInputEvent): Promise<void> {\r\n    const value = event.value;\r\n    const inputTrimmed = (value || '').trim();\r\n    if (!inputTrimmed) {\r\n      this.resetTextInput();\r\n      return;\r\n    }\r\n    this.log('addFromTextInput', { value: event.value });\r\n    // Add fruit only when MatAutocomplete is not open\r\n    // To make sure this does not conflict with OptionSelected Event\r\n    const found = this.choices.find(c => c.name === inputTrimmed);\r\n    if (found) {\r\n      this.log('addFromTextInput() found match, adding that instead of making new tag');\r\n      this.addedTagToInternalValue(found);\r\n      this.resetTextInput();\r\n      return;\r\n    }\r\n    if (!this.customValues && this.matAutocomplete.isOpen) {\r\n      // this.resetTextInput();\r\n      return;\r\n    }\r\n    if (!this.customValues) {\r\n      this.resetTextInput();\r\n      this.snack.open('Must select item from list', 'Close', {\r\n        duration: 3000,\r\n        horizontalPosition: 'center',\r\n        verticalPosition: 'bottom'\r\n      });\r\n      this.log('addFromTextInput() unable to add custom values...');\r\n      return;\r\n    }\r\n    this.resetTextInput();\r\n    const newTag = await this.makeNewTag(inputTrimmed);\r\n    this.addedNewTag.emit(newTag);\r\n    this.choices.push(newTag);\r\n    this.addedTagToInternalValue(newTag);\r\n    this.notify(`Adding \"${newTag.name}\" to the global list...`);\r\n    this.log('addFromTextInput() added new tag', { newTag });\r\n  }\r\n\r\n  resetTextInput() {\r\n    // Reset the input value\r\n    this.textInput.nativeElement.value = '';\r\n    this.inputTextControl.setValue(null);\r\n  }\r\n\r\n  optionSelectedFromList(event: MatAutocompleteSelectedEvent): void {\r\n    this.log('optionSelectedFromList()', {\r\n      event,\r\n      value: event.option.viewValue\r\n    });\r\n    const autoCompleteValue = event.option.viewValue;\r\n    const selectedTag = [...(this.choices || [])]\r\n      .filter(tag => tag.name === autoCompleteValue)\r\n      .pop();\r\n    if (!selectedTag) {\r\n      this.warn(\r\n        'optionSelectedFromList() not sure how autocomplete selected something not in the list...'\r\n      );\r\n      return;\r\n    }\r\n    this.addedTagToInternalValue(selectedTag);\r\n    this.textInput.nativeElement.value = '';\r\n    this.textInput.nativeElement.blur();\r\n    this.inputTextControl.setValue(null);\r\n  }\r\n\r\n  async makeNewTag(name): Promise<Tag> {\r\n    const newTagId = uuidv1();\r\n    const newTag: Tag = {\r\n      id: newTagId,\r\n      name: name.trim()\r\n    };\r\n    return newTag;\r\n  }\r\n\r\n  private addedTagToInternalValue(newTag: Tag) {\r\n    const currentValue = [...(this.value || [])];\r\n    currentValue.push(newTag);\r\n    this.value = currentValue;\r\n  }\r\n\r\n  focusOnEnter(e: KeyboardEvent) {\r\n    if (e.keyCode === 13) {\r\n      this.log('enter key pressed', { key: e.key, code: e.keyCode });\r\n      setTimeout(() => {\r\n        this.textInput.nativeElement.focus();\r\n      });\r\n    }\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    if (isDisabled) {\r\n      this.inputTextControl.disable();\r\n    } else {\r\n      this.inputTextControl.enable();\r\n    }\r\n    super.setDisabledState(isDisabled);\r\n  }\r\n\r\n  hasRed() {\r\n    const isDirty = this.inputTextControl.touched || this.inputTextControl.dirty;\r\n    const isInValid = this.internalControl.invalid;\r\n    return isDirty && isInValid;\r\n  }\r\n\r\n  notify(message: string) {\r\n    this.snack.open(message, 'Close', {\r\n      duration: 3000,\r\n      horizontalPosition: 'center',\r\n      verticalPosition: 'bottom'\r\n    });\r\n  }\r\n\r\n  log(msg: string, obj?: any) {\r\n    if (!obj) {\r\n      return console.log('form-tag-multiple: ', msg);\r\n    }\r\n    console.log('form-tag-multiple: ', msg, obj);\r\n  }\r\n\r\n  warn(msg: string, obj?: any) {\r\n    if (!obj) {\r\n      return console.log('form-tag-multiple: ', msg);\r\n    }\r\n    console.warn('form-tag-multiple: ', msg, obj);\r\n  }\r\n\r\n  CheckValueIsValid() {\r\n    if (!this.internalControl || !this.internalControl.validator) {\r\n      return;\r\n    }\r\n    const validator = this.internalControl.validator({} as AbstractControl);\r\n    const isRequired = validator && validator.required;\r\n    if (!isRequired) {\r\n      return null;\r\n    }\r\n    if (!Array.isArray(this.value)) {\r\n      return 'form value is not an array';\r\n    }\r\n    if (!this.value.length) {\r\n      return 'form value is required but has no value';\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","// tslint:disable: variable-name\r\nimport {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n  ElementRef\r\n} from '@angular/core';\r\nimport {\r\n  MatAutocomplete,\r\n  MatAutocompleteSelectedEvent,\r\n  MatChipInputEvent,\r\n  MatSnackBar,\r\n  MatAutocompleteTrigger\r\n} from '@angular/material';\r\nimport { FormControl, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { map, startWith, takeUntil } from 'rxjs/operators';\r\nimport { ConfirmationService } from '../../dialogs/app-confirmation.component';\r\nimport { FormBase } from '../form-base-class';\r\nimport { Tag } from './Tag';\r\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\r\n\r\nimport { v1 as uuidv1 } from 'uuid';\r\nimport { SimpleLog } from '../../utils/logger';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-tag-single',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <mat-chip-list #chipList [disabled]=\"disabled\">\r\n        <mat-chip\r\n          *ngIf=\"selectedTag as tag\"\r\n          [selectable]=\"selectable\"\r\n          [removable]=\"removable\"\r\n          (removed)=\"removeTagChip(tag)\"\r\n          [disabled]=\"disabled\"\r\n        >\r\n          {{ tag.name }}\r\n          <mat-icon matChipRemove *ngIf=\"removable && !disabled\"\r\n            >cancel</mat-icon\r\n          >\r\n        </mat-chip>\r\n        <input\r\n          [placeholder]=\"placeholder\"\r\n          #textInput\r\n          [name]=\"autoCompleteObscureName\"\r\n          autocomplete=\"dontcompleteme\"\r\n          [formControl]=\"inputTextControl\"\r\n          [matAutocomplete]=\"auto\"\r\n          [matChipInputFor]=\"chipList\"\r\n          [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n          [matChipInputAddOnBlur]=\"addOnBlur\"\r\n          (matChipInputTokenEnd)=\"addFromTextInput($event)\"\r\n          (keydown)=\"focusOnEnter($event)\"\r\n        />\r\n        <mat-icon\r\n          class=\"is-grey r15\"\r\n          matTooltip=\"Add a single tag here, you can manage all your tags using the tag list editor in the settings menu\"\r\n          matBadge=\"1\"\r\n          matSuffix\r\n          >local_offer</mat-icon\r\n        >\r\n      </mat-chip-list>\r\n      <mat-autocomplete\r\n        #auto=\"matAutocomplete\"\r\n        (optionSelected)=\"optionSelectedFromList($event)\"\r\n      >\r\n        <mat-option\r\n          *ngFor=\"let choiceName of filteredTagNames$ | async\"\r\n          [value]=\"choiceName\"\r\n        >\r\n          {{ choiceName }}\r\n        </mat-option>\r\n      </mat-autocomplete>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n      }\r\n      .is-grey {\r\n        color: grey;\r\n      }\r\n      .r15 {\r\n        right: 15px;\r\n      }\r\n      mat-icon span {\r\n        background-color: #afc5b000;\r\n        right: 1px !important;\r\n        top: 3px !important;\r\n        color: white;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormTagSingleComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormTagSingleComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormTagSingleComponent extends FormBase<Tag>\r\n  implements OnInit, OnDestroy {\r\n  // EXTERNAL API\r\n  private _choices: Tag[];\r\n  @Input()\r\n  set choices(newChoices) {\r\n    if (!newChoices) {\r\n      newChoices = [];\r\n    }\r\n    this._choices = newChoices;\r\n    this.inputTextControl.patchValue(this.inputTextControl.value);\r\n  }\r\n  get choices() {\r\n    return this._choices;\r\n  }\r\n  @Input() customValues: boolean;\r\n  @Input() filterStrategy: 'all' | 'beginning' = 'all';\r\n  @Input() removable = true;\r\n  @Output() addedNewTag = new EventEmitter<Tag>();\r\n\r\n  // INTERNAL\r\n\r\n  get selectedTag() {\r\n    return this.value;\r\n  }\r\n  get choicesStrings(): string[] {\r\n    return this.choices.map(t => (!!t ? t.name : ''));\r\n  }\r\n  visible = true;\r\n  selectable = true;\r\n  addOnBlur = true;\r\n  separatorKeysCodes: number[] = [ENTER, COMMA];\r\n  inputTextControl = new FormControl();\r\n  filteredTagNames$: Observable<string[]>;\r\n\r\n  @ViewChild('textInput', {} as any) textInput: ElementRef<HTMLInputElement>;\r\n  @ViewChild('textInput', { read: MatAutocompleteTrigger } as any)\r\n  matAutocompleteTrigger: MatAutocompleteTrigger;\r\n  @ViewChild('auto', {} as any)\r\n  matAutocomplete: MatAutocomplete;\r\n\r\n  destroyed = new Subject<void>();\r\n  logger: SimpleLog;\r\n\r\n  constructor(\r\n    private confirm: ConfirmationService,\r\n    private snack: MatSnackBar\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.checkExists(this.choices, 'this.selectChoices$');\r\n    this.logger = new SimpleLog(this.debug);\r\n\r\n    this.filteredTagNames$ = this.inputTextControl.valueChanges.pipe(\r\n      startWith(null),\r\n      map((tagName: string | null) =>\r\n        tagName ? this._filter(tagName) : this.getChoicesMinusSelected()\r\n      )\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyed.next();\r\n  }\r\n\r\n  writeValue(newVal: Tag) {\r\n    this.value = newVal;\r\n  }\r\n\r\n  private getChoicesMinusSelected(): string[] {\r\n    const selectedTagName = this.selectedTag ? this.selectedTag.name : '';\r\n    const alreadySelectedSet = new Set([selectedTagName]);\r\n    return this.choicesStrings.filter(\r\n      choice => !alreadySelectedSet.has(choice)\r\n    );\r\n  }\r\n\r\n  private _filter(value: string): string[] {\r\n    const choices = this.getChoicesMinusSelected();\r\n    if (this.filterStrategy === 'all') {\r\n      return _filterAll();\r\n    } else {\r\n      return _filterBeginning();\r\n    }\r\n    function _filterAll(): string[] {\r\n      const filterValue = value.toLowerCase();\r\n      return choices.filter(choice =>\r\n        (choice + '').toLowerCase().includes(filterValue)\r\n      );\r\n    }\r\n    function _filterBeginning(): string[] {\r\n      const filterValue = value.toLowerCase();\r\n      return choices.filter(\r\n        choice => (choice + '').toLowerCase().indexOf(filterValue) === 0\r\n      );\r\n    }\r\n  }\r\n\r\n  checkExists(val, name) {\r\n    if (val == null) {\r\n      throw new Error(name + ' has not been defined');\r\n    }\r\n  }\r\n\r\n  removeTagChip(tagToRemove: Tag) {\r\n    this.logger.log('removeTagChip', { tagToRemove });\r\n    this.matAutocompleteTrigger.closePanel();\r\n    this.value = null;\r\n    this.inputTextControl.setValue(null);\r\n  }\r\n\r\n  async addFromTextInput(event: MatChipInputEvent): Promise<void> {\r\n    const value = event.value;\r\n    const inputTrimmed = (value || '').trim();\r\n    if (!inputTrimmed) {\r\n      this.resetTextInput();\r\n      return;\r\n    }\r\n    this.logger.log('addFromTextInput', { value: event.value });\r\n    // Add fruit only when MatAutocomplete is not open\r\n    // To make sure this does not conflict with OptionSelected Event\r\n    const found = this.choices.find(c => c.name === inputTrimmed);\r\n    if (found) {\r\n      this.logger.log('addFromTextInput() found match, adding that instead of making new tag');\r\n      this.addedTagToInternalValue(found);\r\n      this.resetTextInput();\r\n      return;\r\n    }\r\n    if (!this.customValues && this.matAutocomplete.isOpen) {\r\n      // this.resetTextInput();\r\n      return;\r\n    }\r\n    if (!this.customValues) {\r\n      this.resetTextInput();\r\n      this.snack.open('Must select item from list', 'Close', {\r\n        duration: 3000,\r\n        horizontalPosition: 'center',\r\n        verticalPosition: 'bottom'\r\n      });\r\n      this.logger.log('addFromTextInput() unable to add custom values...');\r\n      return;\r\n    }\r\n    this.resetTextInput();\r\n    const confirmed = await this.confirm.AskConfirm(\r\n      `Are you sure you want to add: \"${inputTrimmed}\" to the global list?`\r\n    );\r\n    if (!confirmed) {\r\n      this.logger.log('addFromTextInput() not confirmed, nothing changed...');\r\n      this.notify('Nothing added globally');\r\n      return;\r\n    }\r\n    const newTag = await this.makeNewTag(inputTrimmed);\r\n    this.addedNewTag.emit(newTag);\r\n    this.choices.push(newTag);\r\n    this.addedTagToInternalValue(newTag);\r\n    this.notify(`Adding \"${newTag.name}\" to the global list...`);\r\n    this.logger.log('addFromTextInput() added new tag', { newTag, confirmed });\r\n  }\r\n\r\n  resetTextInput() {\r\n    // Reset the input value\r\n    this.textInput.nativeElement.value = '';\r\n    this.inputTextControl.setValue('');\r\n  }\r\n\r\n  optionSelectedFromList(event: MatAutocompleteSelectedEvent): void {\r\n    this.logger.log('optionSelectedFromList()', {\r\n      event,\r\n      value: event.option.viewValue\r\n    });\r\n    const autoCompleteValue = event.option.viewValue;\r\n    const selectedTag = [...(this.choices || [])]\r\n      .filter(tag => tag.name === autoCompleteValue)\r\n      .pop();\r\n    if (!selectedTag) {\r\n      this.logger.warn(\r\n        'optionSelectedFromList() not sure how autocomplete selected something not in the list...'\r\n      );\r\n      return;\r\n    }\r\n    this.addedTagToInternalValue(selectedTag);\r\n    this.textInput.nativeElement.value = '';\r\n    this.textInput.nativeElement.blur();\r\n    this.inputTextControl.setValue(null);\r\n  }\r\n\r\n  async makeNewTag(name): Promise<Tag> {\r\n    const newTagId = uuidv1();\r\n    const newTag: Tag = {\r\n      id: newTagId,\r\n      name: name.trim()\r\n    };\r\n    return newTag;\r\n  }\r\n\r\n  private addedTagToInternalValue(newTag: Tag) {\r\n    this.value = newTag;\r\n  }\r\n\r\n  focusOnEnter(e: KeyboardEvent) {\r\n    if (e.keyCode === 13) {\r\n      this.logger.log('enter key pressed', { key: e.key, code: e.keyCode });\r\n      setTimeout(() => {\r\n        this.textInput.nativeElement.focus();\r\n      });\r\n    }\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    if (isDisabled) {\r\n      this.inputTextControl.disable();\r\n    } else {\r\n      this.inputTextControl.enable();\r\n    }\r\n    super.setDisabledState(isDisabled);\r\n  }\r\n\r\n  notify(message: string) {\r\n    this.snack.open(message, 'Close', {\r\n      duration: 3000,\r\n      horizontalPosition: 'center',\r\n      verticalPosition: 'bottom'\r\n    });\r\n  }\r\n}\r\n","import { Component, forwardRef, Input, OnInit } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-number',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <input\r\n        matInput\r\n        type=\"number\"\r\n        [min]=\"min\"\r\n        [max]=\"max\"\r\n        [step]=\"step\"\r\n        [placeholder]=\"placeholder\"\r\n        [formControl]=\"internalControl\"\r\n        [name]=\"autoCompleteObscureName\"\r\n        autocomplete=\"dontcompleteme\"\r\n      />\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormNumberComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormNumberComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormNumberComponent extends FormBase<number> implements OnInit {\r\n  @Input()\r\n  min = 0;\r\n  @Input()\r\n  max = 100;\r\n  @Input()\r\n  step = 1;\r\n}\r\n","import { Component, forwardRef, Input, OnInit, OnDestroy } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { FormBase } from '../form-base-class';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-select-string-multiple',\r\n  template: `\r\n    <mat-form-field [appearance]=\"appearance\" class=\"full-width\">\r\n      <mat-select\r\n        [formControl]=\"this.internalControl\"\r\n        [placeholder]=\"placeholder\"\r\n        multiple\r\n      >\r\n        <mat-select-trigger>\r\n          <div *ngIf=\"this.internalControl.value as selected\">\r\n            {{ selected?.length ? selected[0] : '' }}\r\n            <span\r\n              *ngIf=\"this.internalControl.value?.length > 1\"\r\n              class=\"example-additional-selection\"\r\n            >\r\n              (+{{ selected.length - 1 }}\r\n              {{ selected?.length === 2 ? 'other' : 'others' }})\r\n            </span>\r\n          </div>\r\n        </mat-select-trigger>\r\n        <mat-option *ngFor=\"let selection of selections\" [value]=\"selection\">\r\n          {{ selection }}\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .full-width {\r\n        width: 100%;\r\n        padding-bottom: 15px;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormSelectStringMultipleComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormSelectStringMultipleComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormSelectStringMultipleComponent extends FormBase<string[]> {\r\n  @Input()\r\n  selections: string[];\r\n}\r\n","import { NgModule } from '@angular/core';\nimport {\n  MatSnackBarModule,\n  MatInputModule,\n  MatSlideToggleModule,\n  MatChipsModule,\n  MatCardModule,\n  MatButtonModule,\n  MatBadgeModule,\n  MatDialogModule,\n  MatAutocompleteModule,\n  MatFormFieldModule,\n  MatIconModule,\n  MatSelectModule,\n  MatCheckboxModule,\n  MatTooltipModule,\n  MatProgressSpinnerModule\n} from '@angular/material';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { LibFormSelectObjectMultipleComponent } from './form-select-object-multiple.component';\nimport { LibFormToggleComponent } from './form-toggle.component';\nimport { LibFormTextClearableComponent } from './form-text-clearable.component';\nimport { LibFormTextDisabledComponent } from './form-text-disabled.component';\nimport { LibFormTextIconsComponent } from './form-text-icons.component';\nimport { LibFormTextPasswordComponent } from './form-text-password.component';\nimport { LibFormTextComponent } from './form-text.component';\nimport { LibFormTextAreaDisabledComponent } from './form-textarea-disabled.component';\nimport { LibFormTextAreaComponent } from './form-textarea.component';\nimport { LibFormToggleReversedComponent } from './form-toggle-reversed.component';\nimport { LibFormSelectObjectComponent } from './form-select-object.component';\nimport { LibFormSelectStringComponent } from './form-select-string.component';\nimport { LibFormTagMultipleComponent } from './form-tag-multiple.component';\nimport { LibFormTagSingleComponent } from './form-tag-single.component';\nimport { LibFormNumberComponent } from './form-number.component';\nimport { LibFormSelectStringMultipleComponent } from './form-select-string-multiple.component';\n\nconst exportedModules = [\n  CommonModule,\n  FormsModule,\n  ReactiveFormsModule,\n  MatSnackBarModule,\n  MatInputModule,\n  MatSlideToggleModule,\n  MatChipsModule,\n  MatCardModule,\n  MatButtonModule,\n  MatBadgeModule,\n  MatDialogModule,\n  MatAutocompleteModule,\n  MatFormFieldModule,\n  MatIconModule,\n  MatSelectModule,\n  MatCheckboxModule,\n  MatTooltipModule,\n  MatProgressSpinnerModule\n];\n\nconst exported = [\n  LibFormNumberComponent,\n  LibFormSelectObjectComponent,\n  LibFormSelectObjectMultipleComponent,\n  LibFormSelectStringComponent,\n  LibFormSelectStringMultipleComponent,\n  LibFormTagMultipleComponent,\n  LibFormTagSingleComponent,\n  LibFormTextAreaComponent,\n  LibFormTextAreaDisabledComponent,\n  LibFormTextClearableComponent,\n  LibFormTextComponent,\n  LibFormTextDisabledComponent,\n  LibFormTextIconsComponent,\n  LibFormTextPasswordComponent,\n  LibFormToggleComponent,\n  LibFormToggleReversedComponent,\n];\n\n@NgModule({\n  imports: [...exportedModules],\n  exports: [...exported, ...exportedModules],\n  declarations: [...exported],\n  providers: []\n})\nexport class MatReduceFormsUsingMaterialModule {}\n","import { Tag } from '../material/Tag';\n\nexport interface Assignee {\n  selected_tag?: Tag;\n  selected_obj?: any;\n  assignee_id?: string;\n  type: AssigneeType;\n  name: string;\n  email: string;\n  mobile?: string;\n}\n\nexport enum AssigneeType {\n  contractor = 'Contractor',\n  staffMember = 'Staff Member',\n  myDetails = 'My Details',\n}\n\nexport interface User {\n  id?: string;\n  Email: string;\n  'First Name': string;\n  'Last Name': string;\n  Phone: string;\n}\n\nexport interface StaffMember {\n  id?: string;\n  name?: string;\n  email?: string;\n  phone?: string;\n}\n\nexport interface Contractor {\n  id?: string;\n  contactsArray?: Contact[];\n}\n\nexport interface Contact {\n  id: string;\n  name?: string;\n  email?: string;\n  phone?: string;\n}\n\nexport function blankContact(): Contact {\n  return {\n    id: '',\n    name: '',\n    email: '',\n    phone: '',\n  };\n}\n\n","import { Component, Input, OnDestroy, OnInit, forwardRef } from '@angular/core';\r\nimport { FormControl, NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\r\nimport { Subject, pipe } from 'rxjs';\r\nimport { FormBase } from '../form-base-class';\r\nimport { Tag } from '../material/Tag';\r\nimport { takeUntil, auditTime, tap } from 'rxjs/operators';\r\nimport {\r\n  FormControlTypeSafe,\r\n  FormBuilderTypedService\r\n} from '../../services/form-builder-typed.service';\r\nimport {\r\n  Assignee,\r\n  AssigneeType,\r\n  User,\r\n  StaffMember,\r\n  Contractor\r\n} from './form-assignee.models';\r\nimport { GetFirstContact } from './contact-helper';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'form-assignee-selector',\r\n  template: `\r\n    <mat-card>\r\n      <div class=\"import\">\r\n        <form-select-string\r\n          [formControl]=\"this.selectImportTypeControl\"\r\n          [selections]=\"this.assigneeTypes\"\r\n          placeholder=\"Assignee Type\"\r\n        >\r\n        </form-select-string>\r\n        <form-tag-single\r\n          placeholder=\"Select Contractor\"\r\n          [hidden]=\"this.hideSelectContractor\"\r\n          [formControl]=\"this.selectItemContractorControl\"\r\n          [choices]=\"contractorsList\"\r\n          [customValues]=\"false\"\r\n        >\r\n        </form-tag-single>\r\n\r\n        <form-tag-single\r\n          placeholder=\"Select Staff Member\"\r\n          [hidden]=\"this.hideSelectStaff\"\r\n          [formControl]=\"this.selectItemStaffControl\"\r\n          [choices]=\"staffList\"\r\n          [customValues]=\"false\"\r\n        >\r\n        </form-tag-single>\r\n      </div>\r\n      <div *ngIf=\"!(this.value && this.value.name)\">\r\n        Please select an assignee\r\n      </div>\r\n      <div *ngIf=\"this.value as selectedAssignee\">\r\n        <h3>Selected Assignee:</h3>\r\n        <div class=\"assignee\">\r\n          <p>\r\n            Name: <strong>{{ selectedAssignee.name }}</strong>\r\n          </p>\r\n          <p>\r\n            Email: <strong>{{ selectedAssignee.email }}</strong>\r\n          </p>\r\n          <p>\r\n            Phone: <strong>{{ selectedAssignee.mobile }}</strong>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </mat-card>\r\n  `,\r\n  styles: [\r\n    `\r\n      .import {\r\n        display: grid;\r\n        grid-template-columns: 100%;\r\n        grid-gap: 2%;\r\n        margin-bottom: 10px;\r\n      }\r\n      .assignee p {\r\n        margin: 0;\r\n      }\r\n      .assignee h3 {\r\n        margin: 0;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => LibFormAssigneeSelectorComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => LibFormAssigneeSelectorComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class LibFormAssigneeSelectorComponent extends FormBase<Assignee>\r\n  implements OnInit, OnDestroy {\r\n  @Input()\r\n  currentUser: User;\r\n  @Input()\r\n  contractorsList: Tag[];\r\n  @Input()\r\n  staffList: Tag[];\r\n\r\n  selectImportTypeControl: FormControlTypeSafe<string>;\r\n  selectItemContractorControl: FormControlTypeSafe<Tag>;\r\n  selectItemStaffControl: FormControlTypeSafe<Tag>;\r\n\r\n  assigneeTypes: string[] = Object.keys(AssigneeType).map(k => AssigneeType[k]);\r\n\r\n  hideSelectContractor = true;\r\n  hideSelectStaff = true;\r\n\r\n  destroyed = new Subject();\r\n\r\n  constructor(private fb: FormBuilderTypedService) {\r\n    super();\r\n    this.selectImportTypeControl = this.fb.control<AssigneeType>();\r\n    this.selectItemContractorControl = this.fb.control<Tag>();\r\n    this.selectItemStaffControl = this.fb.control<Tag>();\r\n  }\r\n\r\n  makeLogPipe(logString: string) {\r\n    return pipe(\r\n      takeUntil(this.destroyed),\r\n      auditTime(300),\r\n      tap(val => console.log('assignee-selector: ', logString, { val }))\r\n    );\r\n  }\r\n\r\n  checkStatus(control: FormControl, disabled: boolean) {\r\n    if (disabled && !control.disabled) {\r\n      control.disable();\r\n    }\r\n    if (!disabled && control.disabled) {\r\n      control.enable();\r\n    }\r\n  }\r\n\r\n  async ngOnInit() {\r\n    // Check if main control has been disabled/enabled\r\n    this.internalControl.statusChanges\r\n      .pipe(this.makeLogPipe('control.statusChanges'))\r\n      .subscribe(newVal => {\r\n        const disabled = newVal === 'DISABLED';\r\n        this.checkStatus(this.selectImportTypeControl, disabled);\r\n        this.checkStatus(this.selectItemStaffControl, disabled);\r\n        this.checkStatus(this.selectItemContractorControl, disabled);\r\n      });\r\n    // Check if import type has changed\r\n    this.selectImportTypeControl.valueChanges\r\n      .pipe(this.makeLogPipe('selectImportTypeControl.valueChanges'))\r\n      .subscribe(val => {\r\n        if (val === AssigneeType.myDetails) {\r\n          return this.handleSelectedMyDetails();\r\n        }\r\n        if (val === AssigneeType.contractor) {\r\n          this.hideSelectContractor = false;\r\n          this.hideSelectStaff = true;\r\n        }\r\n        if (val === AssigneeType.staffMember) {\r\n          this.hideSelectStaff = false;\r\n          this.hideSelectContractor = true;\r\n        }\r\n      });\r\n    // Check if selectItemContractorControl has changed\r\n    this.selectItemContractorControl.valueChanges\r\n      .pipe(this.makeLogPipe('selectItemContractorControl.valueChanges'))\r\n      .subscribe(async (val: Tag) => {\r\n        return this.handleSelectedSingleContractor(val);\r\n      });\r\n    // Check if selectItemStaffControl has changed\r\n    this.selectItemStaffControl.valueChanges\r\n      .pipe(this.makeLogPipe('selectItemStaffControl.valueChanges'))\r\n      .subscribe(async (val: Tag) => {\r\n        return this.handleSelectedSingleStaff(val);\r\n      });\r\n    const currentValue = this.value;\r\n    if (currentValue) {\r\n      this.selectImportTypeControl.patchValue(currentValue.type);\r\n      if (currentValue.type === AssigneeType.contractor) {\r\n        this.selectItemContractorControl.patchValue(currentValue.selected_tag);\r\n      }\r\n      if (currentValue.type === AssigneeType.staffMember) {\r\n        this.selectItemStaffControl.patchValue(currentValue.selected_tag);\r\n      }\r\n    }\r\n  }\r\n\r\n  async ngOnDestroy() {\r\n    this.destroyed.next();\r\n  }\r\n\r\n  get selectedImportType() {\r\n    return this.selectImportTypeControl.value;\r\n  }\r\n\r\n  async handleSelectedSingleStaff(selected: Tag) {\r\n    if (!selected) {\r\n      console.warn('assignee-selector: no staff selected', { selected });\r\n      return;\r\n    }\r\n    const staffMember = selected.obj as StaffMember;\r\n    const newAssignee: Assignee = {\r\n      selected_tag: selected,\r\n      assignee_id: selected.id,\r\n      type: AssigneeType.staffMember,\r\n      name: staffMember.name,\r\n      email: staffMember.email,\r\n      mobile: staffMember.phone\r\n    };\r\n    console.log('assignee-selector: handleSelectedSingleStaff', {\r\n      selected,\r\n      newAssignee\r\n    });\r\n    this.value = newAssignee;\r\n  }\r\n\r\n  async handleSelectedSingleContractor(selected: Tag) {\r\n    if (!selected) {\r\n      console.warn('assignee-selector: no contractor selected', { selected });\r\n      return;\r\n    }\r\n    const contractor = selected.obj as Contractor;\r\n    const contact = GetFirstContact(contractor);\r\n    const newAssignee: Assignee = {\r\n      selected_tag: selected,\r\n      assignee_id: selected.id,\r\n      type: AssigneeType.contractor,\r\n      name: contact.name,\r\n      email: contact.email,\r\n      mobile: contact.phone\r\n    };\r\n    this.value = newAssignee;\r\n    console.log('assignee-selector: handleSelectedSingleContractor', {\r\n      this_value: this.value,\r\n      selected,\r\n      newAssignee\r\n    });\r\n  }\r\n\r\n  async handleSelectedMyDetails() {\r\n    this.hideSelectStaff = true;\r\n    this.hideSelectContractor = true;\r\n    const user = this.currentUser;\r\n    console.log(\r\n      'assignee-selector: handleSelectedMyDetails() importing my details',\r\n      {\r\n        user\r\n      }\r\n    );\r\n    const newAssignee: Assignee = {\r\n      selected_obj: user,\r\n      assignee_id: user.id,\r\n      type: AssigneeType.myDetails,\r\n      name: user['First Name'] + ' ' + user['Last Name'],\r\n      email: user.Email || '',\r\n      mobile: user.Phone || ''\r\n    };\r\n    this.value = newAssignee;\r\n    console.log('assignee-selector: handleSelectedMyDetails() newAssignee', {\r\n      newAssignee\r\n    });\r\n  }\r\n}\r\n","import { Contractor, blankContact } from './form-assignee.models';\n\nexport function GetFirstContact(c: Contractor) {\n  if (!c) {\n    const blank = blankContact();\n    blank.name = 'NO CONTRACTOR FOUND';\n    return blank;\n  }\n  if (c.contactsArray && !!c.contactsArray.length) {\n    return c.contactsArray[0];\n  }\n  const blank = blankContact();\n  blank.name = 'NO CONTACT FOUND';\n  return blank;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatCardModule, MatIconModule } from '@angular/material';\n\nimport { MatReduceFormsUsingMaterialModule } from '../material/forms-material.module';\nimport { LibFormAssigneeSelectorComponent } from './form-assignee-selector.component';\n\nconst exportedModules = [\n  CommonModule,\n  FormsModule,\n  ReactiveFormsModule,\n  MatIconModule,\n  MatCardModule,\n  MatReduceFormsUsingMaterialModule\n];\n\nconst exported = [LibFormAssigneeSelectorComponent];\n\n@NgModule({\n  imports: [...exportedModules],\n  exports: [...exported, ...exportedModules],\n  declarations: [...exported],\n  providers: []\n})\nexport class MatReduceFormsComposedModule {}\n","import { NgModule } from '@angular/core';\r\nimport {\r\n  AppConfirmationDialogComponent,\r\n  ConfirmationService\r\n} from './dialogs/app-confirmation.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\n\r\nimport { FormBuilderTypedService } from './services/form-builder-typed.service';\r\nimport { MatReduceFormsUsing3rdPartyModule } from './controls/using-3rd-party/forms-3rd-party.module';\r\nimport { MatReduceFormsUsingMaterialModule } from './controls/material/forms-material.module';\r\nimport { MatReduceFormsComposedModule } from './controls/composed/forms-composed.module';\r\nimport { MatIconModule } from '@angular/material';\r\n\r\nconst exportedModules = [\r\n  MatReduceFormsUsing3rdPartyModule,\r\n  MatReduceFormsUsingMaterialModule,\r\n  MatReduceFormsComposedModule,\r\n  CommonModule,\r\n  ReactiveFormsModule,\r\n  FormsModule\r\n];\r\n\r\n@NgModule({\r\n  entryComponents: [AppConfirmationDialogComponent],\r\n  declarations: [AppConfirmationDialogComponent],\r\n  exports: [...exportedModules],\r\n  imports: [MatIconModule, ...exportedModules],\r\n  providers: [ConfirmationService, FormBuilderTypedService]\r\n})\r\nexport class MatReduceModule {}\r\n"]}